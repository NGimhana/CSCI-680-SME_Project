bug_id,document,url
10,"/** Copyright (c) 2019 Hai Zhang <dreaming.in.code.zh@gmail.com>* All Rights Reserved.*/package me.zhanghai.android.files.ftpserver;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import java.util.Objects;import androidx.annotation.NonNull;public class FtpServerReceiver extends BroadcastReceiver {private static final String KEY_PREFIX = FtpServerReceiver.class.getName() + '.';public static final String ACTION_STOP = KEY_PREFIX + ""STOP"";@Overridepublic void onReceive(@NonNull Context context, @NonNull Intent intent) {String action = intent.getAction();if (Objects.equals(action, ACTION_STOP)) {FtpServerService.stop(context);} else {throw new IllegalArgumentException(action);}}}",MaterialFiles/app/src/main/java/me/zhanghai/android/files/ftpserver/FtpServerReceiver.java
10,"/** Copyright (c) 2019 Hai Zhang <dreaming.in.code.zh@gmail.com>* All Rights Reserved.*/package me.zhanghai.android.files.ftpserver;import android.app.Service;import android.content.Context;import android.content.Intent;import android.os.IBinder;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.annotation.WorkerThread;import androidx.lifecycle.LiveData;import androidx.lifecycle.MutableLiveData;import java8.nio.file.Path;import me.zhanghai.android.files.settings.Settings;import me.zhanghai.android.files.util.AppUtils;import me.zhanghai.android.files.util.ToastUtils;public class FtpServerService extends Service {public enum State {STARTING,RUNNING,STOPPING,STOPPED}public static final String USERNAME_ANONYMOUS = ""anonymous"";@NonNullprivate static final MutableLiveData<State> sStateLiveData = new MutableLiveData<>(State.STOPPED);@NonNullprivate final ExecutorService mExecutorService = Executors.newSingleThreadExecutor();private FtpServerWakeLock mWakeLock;private State mState = State.STOPPED;private FtpServer mServer;public static void start(@NonNull Context context) {context.startService(new Intent(context, FtpServerService.class));}public static void stop(@NonNull Context context) {context.stopService(new Intent(context, FtpServerService.class));}@NonNullpublic static LiveData<State> getStateLiveData() {return sStateLiveData;}@Overridepublic void onCreate() {super.onCreate();mWakeLock = new FtpServerWakeLock(this);executeStart();}@Nullable@Overridepublic IBinder onBind(@NonNull Intent intent) {return null;}@Overridepublic int onStartCommand(@Nullable Intent intent, int flags, int startId) {return START_STICKY;}@Overridepublic void onDestroy() {super.onDestroy();executeStop();mExecutorService.shutdown();}private void executeStart() {if (mState == State.STARTING || mState == State.RUNNING) {return;}mWakeLock.acquire();FtpServerServiceNotification.startForeground(this);setState(State.STARTING);mExecutorService.execute(this::doStart);}private void onStartError(@NonNull Exception exception) {setState(State.STOPPED);ToastUtils.show(exception.toString(), this);FtpServerServiceNotification.stopForeground(this);mWakeLock.release();stopSelf();}private void executeStop() {if (mState == State.STOPPING || mState == State.STOPPED) {return;}setState(State.STOPPING);mExecutorService.execute(this::doStop);FtpServerServiceNotification.stopForeground(this);mWakeLock.release();}private void setState(@NonNull State state) {mState = state;sStateLiveData.setValue(state);}@WorkerThreadprivate void postState(@NonNull State state) {AppUtils.runOnUiThread(() -> setState(state));}@WorkerThreadprivate void doStart() {if (mServer != null) {return;}String username;String password;if (Settings.FTP_SERVER_ANONYMOUS_LOGIN.getValue()) {username = USERNAME_ANONYMOUS;password = null;} else {username = Settings.FTP_SERVER_USERNAME.getValue();password = Settings.FTP_SERVER_PASSWORD.getValue();}int port = Settings.FTP_SERVER_PORT.getValue();Path homeDirectory = Settings.FTP_SERVER_HOME_DIRECTORY.getValue();boolean writable = Settings.FTP_SERVER_WRITABLE.getValue();mServer = new FtpServer(username, password, port, homeDirectory, writable);try {mServer.start();} catch (Exception e) {e.printStackTrace();mServer = null;AppUtils.runOnUiThread(() -> onStartError(e));return;}postState(State.RUNNING);}@WorkerThreadprivate void doStop() {if (mServer == null) {return;}mServer.stop();mServer = null;postState(State.STOPPED);}}",MaterialFiles/app/src/main/java/me/zhanghai/android/files/ftpserver/FtpServerService.java
10,"/** Copyright (c) 2019 Hai Zhang <dreaming.in.code.zh@gmail.com>* All Rights Reserved.*/package me.zhanghai.android.files.ftpserver;import android.content.Context;import android.util.AttributeSet;import androidx.annotation.AttrRes;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.annotation.StyleRes;import androidx.lifecycle.Observer;import androidx.preference.SwitchPreferenceCompat;import me.zhanghai.android.files.R;public class FtpServerStatePreference extends SwitchPreferenceCompat {@NonNullprivate final Observer<FtpServerService.State> mObserver = this::onStateChanged;public FtpServerStatePreference(@NonNull Context context) {super(context);init();}public FtpServerStatePreference(@NonNull Context context, @Nullable AttributeSet attrs) {super(context, attrs);init();}public FtpServerStatePreference(@NonNull Context context, @Nullable AttributeSet attrs,@AttrRes int defStyleAttr) {super(context, attrs, defStyleAttr);init();}public FtpServerStatePreference(@NonNull Context context, @Nullable AttributeSet attrs,@AttrRes int defStyleAttr, @StyleRes int defStyleRes) {super(context, attrs, defStyleAttr, defStyleRes);init();}private void init() {setPersistent(false);}@Overridepublic void onAttached() {super.onAttached();FtpServerService.getStateLiveData().observeForever(mObserver);}@Overridepublic void onDetached() {super.onDetached();FtpServerService.getStateLiveData().removeObserver(mObserver);}private void onStateChanged(@NonNull FtpServerService.State state) {int summaryRes;switch (state) {case STARTING:summaryRes = R.string.ftp_server_state_summary_starting;break;case RUNNING:summaryRes = R.string.ftp_server_state_summary_running;break;case STOPPING:summaryRes = R.string.ftp_server_state_summary_stopping;break;case STOPPED:summaryRes = R.string.ftp_server_state_summary_stopped;break;default:throw new AssertionError(state);}setSummary(getContext().getString(summaryRes));setChecked(state == FtpServerService.State.STARTING|| state == FtpServerService.State.RUNNING);setEnabled(!(state == FtpServerService.State.STARTING|| state == FtpServerService.State.STOPPING));}@Overrideprotected void onClick() {switch (FtpServerService.getStateLiveData().getValue()) {case STARTING:case STOPPING:break;case RUNNING:FtpServerService.stop(getContext());break;case STOPPED:FtpServerService.start(getContext());break;default:throw new AssertionError();}}}",MaterialFiles/app/src/main/java/me/zhanghai/android/files/ftpserver/FtpServerStatePreference.java
1096,"package org.inaturalist.android;import android.content.ContentValues;import android.content.Intent;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.SurfaceTexture;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.provider.MediaStore;import androidx.appcompat.app.ActionBar;import androidx.appcompat.app.AppCompatActivity;import android.view.MenuItem;import android.view.TextureView;import android.view.View;import android.widget.TextView;import com.livefront.bridge.Bridge;import com.melnykov.fab.FloatingActionButton;import java.io.File;import java.nio.ByteBuffer;import java.nio.ByteOrder;import java.text.SimpleDateFormat;public class RecordSoundActivity extends AppCompatActivity implements SoundRecorder.OnRecordingStatus {private static String TAG = ""RecordSoundActivity"";private INaturalistApp mApp;private ActivityHelper mHelper;private FloatingActionButton mStartRecording;private TextView mStopRecording;private TextView mRecordingTime;private TextureView mVisualizerTexture;private Long mTotalTime = null;private Long mLastStartTime = null;private boolean mIsRecording = false;private SoundRecorder mRecorder;private String mOutputFilename;private boolean mCancelledRecording = false;private static final int MAX_SOUND_LINES = 300;private static final int SOUND_LINE_WIDTH = 4;private static final int SOUND_LINE_SPACING = 4;private static final float MAX_SOUND_VALUE = 500f;private short[] mSoundsValues = new short[MAX_SOUND_LINES];private int mSoundPlaybackIndex = 0;private int mSoundWritingIndex = 0;private int mMaxSamplesForScreenWidth = 0;private Handler mHandler = new Handler();private Runnable mUpdateTimer = new Runnable() {@Overridepublic void run() {float timeSecs = 0;if (mTotalTime != null) {if (mLastStartTime != null) {timeSecs = mTotalTime + (System.currentTimeMillis() - mLastStartTime);} else {timeSecs = mTotalTime;}}timeSecs /= 1000;mRecordingTime.setText(String.format(getResources().getString(R.string.seconds), timeSecs));if (mIsRecording) {mHandler.postDelayed(mUpdateTimer, 100);}}};@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);Bridge.restoreInstanceState(this, savedInstanceState);ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setLogo(R.drawable.ic_arrow_back);setTitle(R.string.record_sound);mApp = (INaturalistApp) getApplicationContext();setContentView(R.layout.record_sound);mStartRecording = findViewById(R.id.start_recording);mStopRecording = findViewById(R.id.stop_recording);mRecordingTime = findViewById(R.id.seconds_counter);mVisualizerTexture = findViewById(R.id.sound_visualizer);mVisualizerTexture.setSurfaceTextureListener(new TextureView.SurfaceTextureListener() {@Overridepublic void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {Canvas canvas = mVisualizerTexture.lockCanvas();int canvasWidth = canvas.getWidth();mVisualizerTexture.unlockCanvasAndPost(canvas);mMaxSamplesForScreenWidth = canvasWidth / (SOUND_LINE_WIDTH + SOUND_LINE_SPACING);mSoundWritingIndex = mMaxSamplesForScreenWidth;}@Overridepublic void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {}@Overridepublic boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {return false;}@Overridepublic void onSurfaceTextureUpdated(SurfaceTexture surface) {}});mRecordingTime.setText(String.format(getResources().getString(R.string.seconds), 0f));String timeStamp = new SimpleDateFormat(""yyyyMMdd_HHmmss"").format(System.currentTimeMillis());File outputDirectory = new File(getExternalFilesDir(Environment.DIRECTORY_MUSIC) + File.separator + ""iNaturalist"");outputDirectory.mkdirs();mOutputFilename = outputDirectory + File.separator + ""inaturalist_sound_"" + timeStamp + "".wav"";mRecorder = new SoundRecorder(this, mOutputFilename, this);mStopRecording.setVisibility(View.GONE);mStartRecording.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {startPauseRecording();}});mHelper = new ActivityHelper(this);mStopRecording.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mIsRecording = false;mRecorder.stopRecording();mHelper.loading();}});}private void drawCurrentSoundWave() {Canvas canvas = mVisualizerTexture.lockCanvas();Paint paint = new Paint();paint.setColor(Color.parseColor(""#cb0000""));paint.setStrokeWidth(SOUND_LINE_WIDTH);paint.setStyle(Paint.Style.STROKE);Paint blackPaint = new Paint();blackPaint.setColor(Color.parseColor(""#000000""));blackPaint.setStrokeWidth(SOUND_LINE_WIDTH);blackPaint.setStyle(Paint.Style.STROKE);int canvasWidth = canvas.getWidth();for (int i = 0; (i < MAX_SOUND_LINES) && (i * (SOUND_LINE_WIDTH + SOUND_LINE_SPACING) <= canvasWidth); i++) {// First, delete previous linedrawBlankSoundLine(canvas, i, blackPaint);// Draw new lineshort soundValue = mSoundsValues[(mSoundPlaybackIndex + i) % MAX_SOUND_LINES];float[] line = soundValueToLine(canvas, i, soundValue);canvas.drawLine(line[0], line[1], line[2], line[3], paint);}mVisualizerTexture.unlockCanvasAndPost(canvas);}private void drawBlankSoundLine(Canvas canvas, int lineOffset, Paint blackPaint) {float yStart = 0;float yEnd = canvas.getHeight();float xStart = lineOffset * (SOUND_LINE_WIDTH + SOUND_LINE_SPACING);float xEnd = xStart;canvas.drawLine(xStart, yStart, xEnd, yEnd, blackPaint);}private float[] soundValueToLine(Canvas canvas, int lineOffset, short soundValue) {float xStart = lineOffset * (SOUND_LINE_WIDTH + SOUND_LINE_SPACING);float centerY = canvas.getHeight() / 2f;float yStart = centerY - (Math.min(1.0f, soundValue / MAX_SOUND_VALUE) * centerY);float yEnd = canvas.getHeight() - yStart;return new float[] { xStart, yStart, xStart, yEnd };}private void startPauseRecording() {if (!mApp.isAudioRecordingPermissionGranted()) {mApp.requestAudioRecordingPermission(RecordSoundActivity.this, new INaturalistApp.OnRequestPermissionResult() {@Overridepublic void onPermissionGranted() {startPauseRecording();}@Overridepublic void onPermissionDenied() {}});return;} else if (!mApp.isExternalStoragePermissionGranted()) {mApp.requestExternalStoragePermission(RecordSoundActivity.this, new INaturalistApp.OnRequestPermissionResult() {@Overridepublic void onPermissionGranted() {startPauseRecording();}@Overridepublic void onPermissionDenied() {}});return;}mStartRecording.setImageDrawable(getResources().getDrawable(mIsRecording ? R.drawable.microphone_white : R.drawable.baseline_pause_white_36));mStopRecording.setVisibility(View.VISIBLE);if (mIsRecording) {mRecorder.pauseRecording();mTotalTime += (System.currentTimeMillis() - mLastStartTime);mLastStartTime = null;} else {if (mTotalTime == null) {mTotalTime = 0L;}mLastStartTime = System.currentTimeMillis();if (mRecorder.hasStartedRecording()) {mRecorder.resumeRecording();} else {mRecorder.startRecording();}mHandler.postDelayed(mUpdateTimer, 100);}mIsRecording = !mIsRecording;}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:onBack();return true;default:return super.onOptionsItemSelected(item);}}@Overrideprotected void onSaveInstanceState(Bundle outState) {super.onSaveInstanceState(outState);Bridge.saveInstanceState(this, outState);}@Overridepublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {mApp.onRequestPermissionsResult(requestCode, permissions, grantResults);}@Overridepublic void onSoundRecording(byte[] values, int count) {short[] shorts = new short[values.length / 2];long total = 0;ByteBuffer.wrap(values).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(shorts);for (int i = 0; i < shorts.length; i++) {total += shorts[i];}short average = (short) (total / shorts.length);mSoundsValues[mSoundWritingIndex] = average;mSoundWritingIndex++;if (mSoundWritingIndex >= MAX_SOUND_LINES) mSoundWritingIndex = 0;// Draw current sound wavedrawCurrentSoundWave();// Move forward via the sound wavemSoundPlaybackIndex += 1;if (mSoundPlaybackIndex == MAX_SOUND_LINES) mSoundPlaybackIndex = 0;}@Overridepublic void onBackPressed() {onBack();}private void onBack() {mCancelledRecording = true;mRecorder.stopRecording();mHelper.loading();}@Overridepublic void onRecordingStopped() {mHelper.stopLoading();if (mCancelledRecording) {// User chose to cancel recording - delete the fileFile outputFile = new File(mOutputFilename);outputFile.delete();setResult(RESULT_CANCELED);finish();return;}// Make this sound accessible via the Android Files app (under Audio category)ContentValues values = new ContentValues();File file = new File(mOutputFilename);values.put(MediaStore.Audio.Media.DATA, mOutputFilename);values.put(MediaStore.Audio.Media.SIZE, file.length());values.put(MediaStore.Audio.Media.DISPLAY_NAME, mOutputFilename.substring(mOutputFilename.lastIndexOf(File.separator) + 1));values.put(MediaStore.Audio.Media.MIME_TYPE, ""audio/wav"");values.put(MediaStore.Audio.Media.IS_MUSIC, true);values.put(MediaStore.Audio.Media.ARTIST, ""iNaturalist"");values.put(MediaStore.Audio.Media.ALBUM, ""Sound Recordings"");values.put(MediaStore.Audio.Media.DATE_ADDED, System.currentTimeMillis());values.put(MediaStore.Audio.Media.DATE_MODIFIED, System.currentTimeMillis());String timeStamp = new SimpleDateFormat(""yyyyMMdd_HHmmss"").format(System.currentTimeMillis());values.put(MediaStore.Audio.Media.TITLE, String.format(""iNaturalist Sound Recording - %s"", timeStamp));Uri uri = getContentResolver().insert(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, values);Intent intent = new Intent();intent.setData(Uri.parse(mOutputFilename));setResult(RESULT_OK, intent);finish();}}",iNaturalistAndroid/iNaturalist/src/main/java/org/inaturalist/android/RecordSoundActivity.java
1147,"/** Copyright 2014-2018 Google Inc.,* University of South Florida (sjbarbeau@gmail.com),* Microsoft Corporation,* Sean J. Barbeau** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at**      http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.** Portions of code taken from the Google I/0 2014 (https://github.com/google/iosched)* and a generated NavigationDrawer app from Android Studio, modified for OneBusAway by USF,* modified for GPSTest by Sean J. Barbeau*/package com.android.gpstest;import android.content.Context;import android.content.SharedPreferences;import android.content.res.Configuration;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.view.GravityCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBar;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.android.gpstest.view.ScrimInsetsScrollView;import java.util.ArrayList;/*** Fragment used for managing interactions for and presentation of a navigation drawer.* See the <a href=""https://developer.android.com/design/patterns/navigation-drawer.html#Interaction"">* design guidelines</a> for a complete explanation of the behaviors implemented here.*/public class NavigationDrawerFragment extends Fragment {public static final String TAG = ""NavDrawerFragment"";/*** Remember the position of the selected item.*/private static final String STATE_SELECTED_POSITION = ""selected_navigation_drawer_position"";// symbols for navdrawer items (indices must correspond to array below). This is// not a list of items that are necessarily *present* in the Nav Drawer; rather,// it's a list of all possible items.protected static final int NAVDRAWER_ITEM_STATUS = 0;protected static final int NAVDRAWER_ITEM_MAP = 1;protected static final int NAVDRAWER_ITEM_SKY = 2;protected static final int NAVDRAWER_ITEM_SETTINGS = 3;protected static final int NAVDRAWER_ITEM_HELP = 4;protected static final int NAVDRAWER_ITEM_OPEN_SOURCE = 5;protected static final int NAVDRAWER_ITEM_INJECT_XTRA_DATA = 6;protected static final int NAVDRAWER_ITEM_INJECT_TIME_DATA = 7;protected static final int NAVDRAWER_ITEM_CLEAR_AIDING_DATA = 8;protected static final int NAVDRAWER_ITEM_INVALID = -1;protected static final int NAVDRAWER_ITEM_SEPARATOR = -2;protected static final int NAVDRAWER_ITEM_SEPARATOR_SPECIAL = -3;// Currently selected navigation drawer item (must be value of one of the constants above)private int mCurrentSelectedPosition = NAVDRAWER_ITEM_STATUS;// titles for navdrawer items (indices must correspond to the above)private static final int[] NAVDRAWER_TITLE_RES_ID = new int[]{R.string.gps_status_title,R.string.gps_map_title,R.string.gps_sky_title,R.string.navdrawer_item_settings,R.string.navdrawer_item_help,R.string.navdrawer_item_open_source,R.string.force_xtra_injection,R.string.force_time_injection,R.string.delete_aiding_data};// icons for navdrawer items (indices must correspond to above array)private static final int[] NAVDRAWER_ICON_RES_ID = new int[]{R.drawable.ic_wireless,  // StatusR.drawable.ic_map, // MapR.drawable.ic_sky, // Sky0, // Settings0, // HelpR.drawable.ic_drawer_github, // Open-sourceR.drawable.ic_inject_xtra, // Inject XTRA dataR.drawable.ic_inject_time, // Inject time dataR.drawable.ic_delete // Clear assist data};// Secondary navdrawer item icons that appear align to right of list item layoutprivate static final int[] NAVDRAWER_ICON_SECONDARY_RES_ID = new int[]{0,  // Status0, // Map0, // Sky0, // Settings0, // HelpR.drawable.ic_drawer_link, // Open-source0, // Inject XTRA data0, // Inject time data0 // Clear assist data};// list of navdrawer items that were actually added to the navdrawer, in orderprivate ArrayList<Integer> mNavDrawerItems = new ArrayList<Integer>();// views that correspond to each navdrawer item, null if not yet createdprivate View[] mNavDrawerItemViews = null;/*** A pointer to the current callbacks instance (the Activity).*/private NavigationDrawerCallbacks mCallbacks;/*** Helper component that ties the action bar to the navigation drawer.*/private ActionBarDrawerToggle mDrawerToggle;// Navigation drawer:private DrawerLayout mDrawerLayout;private View mDrawerItemsListContainer;private View mFragmentContainerView;private boolean isSignedIn;public NavigationDrawerFragment() {}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);// Read in the flag indicating whether or not the user has demonstrated awareness of the// drawer. See PREF_USER_LEARNED_DRAWER for details.SharedPreferences sp = Application.getPrefs();if (savedInstanceState != null) {mCurrentSelectedPosition = savedInstanceState.getInt(STATE_SELECTED_POSITION);Log.d(TAG, ""Using position from savedInstanceState = "" + mCurrentSelectedPosition);} else {// Try to get the saved position from preferencesmCurrentSelectedPosition = sp.getInt(STATE_SELECTED_POSITION, NAVDRAWER_ITEM_STATUS);Log.d(TAG, ""Using position from preferences = "" + mCurrentSelectedPosition);}// Select either the default item (0) or the last selected item.selectItem(mCurrentSelectedPosition);}@Overridepublic void onActivityCreated(Bundle savedInstanceState) {super.onActivityCreated(savedInstanceState);// Indicate that this fragment would like to influence the set of actions in the action bar.setHasOptionsMenu(true);}@Overridepublic View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {mDrawerItemsListContainer = inflater.inflate(R.layout.navdrawer_list, container, false);return mDrawerItemsListContainer;}/*** Users of this fragment must call this method to set up the navigation drawer interactions.** @param fragmentId   The android:id of this fragment in its activity's layout.* @param drawerLayout The DrawerLayout containing this fragment's UI.*/public void setUp(int fragmentId, DrawerLayout drawerLayout) {int selfItem = mCurrentSelectedPosition;mFragmentContainerView = getActivity().findViewById(fragmentId);mDrawerLayout = drawerLayout;if (mDrawerLayout == null) {return;}// set a custom shadow that overlays the main content when the drawer opensmDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);ScrimInsetsScrollView navDrawer = mDrawerLayout.findViewById(R.id.navdrawer);if (selfItem == NAVDRAWER_ITEM_INVALID) {// do not show a nav drawerif (navDrawer != null) {((ViewGroup) navDrawer.getParent()).removeView(navDrawer);}mDrawerLayout = null;return;}// populate the nav drawer with the correct itemspopulateNavDrawer();ActionBar actionBar = getActionBar();actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setHomeButtonEnabled(true);// ActionBarDrawerToggle ties together the the proper interactions// between the navigation drawer and the action bar app icon.mDrawerToggle = new android.support.v7.app.ActionBarDrawerToggle(getActivity(),                    /* host Activity */mDrawerLayout,                    /* DrawerLayout object */R.string.navigation_drawer_open,  /* ""open drawer"" description for accessibility */R.string.navigation_drawer_close  /* ""close drawer"" description for accessibility */) {@Overridepublic void onDrawerClosed(View drawerView) {super.onDrawerClosed(drawerView);if (!isAdded()) {return;}getActivity().supportInvalidateOptionsMenu(); // calls onPrepareOptionsMenu()}@Overridepublic void onDrawerOpened(View drawerView) {super.onDrawerOpened(drawerView);if (!isAdded()) {return;}getActivity().supportInvalidateOptionsMenu(); // calls onPrepareOptionsMenu()}};// Defer code dependent on restoration of previous instance state.mDrawerLayout.post(new Runnable() {@Overridepublic void run() {mDrawerToggle.syncState();}});mDrawerLayout.setDrawerListener(mDrawerToggle);}/*** Sets the currently selected navigation drawer item, based on the provided position* parameter,* which must be one of the NAVDRAWER_ITEM_* contants in this class.** @param position the item to select in the navigation drawer - must be one of the*                 NAVDRAWER_ITEM_* contants in this class*/public void selectItem(int position) {setSelectedNavDrawerItem(position);if (mDrawerLayout != null && mFragmentContainerView != null) {mDrawerLayout.closeDrawer(mFragmentContainerView);}if (mCallbacks != null) {mCallbacks.onNavigationDrawerItemSelected(position);}}/*** Set the selected position as a preference*/public void setSavedPosition(int position) {SharedPreferences sp = Application.getPrefs();sp.edit().putInt(STATE_SELECTED_POSITION, position).apply();}/*** Sets up the given navdrawer item's appearance to the selected state. Note: this could* also be accomplished (perhaps more cleanly) with state-based layouts.*/private void setSelectedNavDrawerItem(int itemId) {if (!isNewActivityItem(itemId)) {// We only change the selected item if it doesn't launch a new activitymCurrentSelectedPosition = itemId;setSavedPosition(mCurrentSelectedPosition);}if (mNavDrawerItemViews != null) {for (int i = 0; i < mNavDrawerItemViews.length; i++) {if (i < mNavDrawerItems.size()) {int thisItemId = mNavDrawerItems.get(i);formatNavDrawerItem(mNavDrawerItemViews[i], thisItemId, itemId == thisItemId);}}}}@Overridepublic void onAttach(final Context context) {super.onAttach(context);try {mCallbacks = (NavigationDrawerCallbacks) context;} catch (ClassCastException e) {throw new ClassCastException(""Activity must implement NavigationDrawerCallbacks."");}}@Overridepublic void onDetach() {super.onDetach();mCallbacks = null;}@Overridepublic void onSaveInstanceState(Bundle outState) {super.onSaveInstanceState(outState);Log.d(TAG, ""Saving position = "" + mCurrentSelectedPosition);outState.putInt(STATE_SELECTED_POSITION, mCurrentSelectedPosition);}@Overridepublic void onResume() {super.onResume();populateNavDrawer();}@Overridepublic void onConfigurationChanged(Configuration newConfig) {super.onConfigurationChanged(newConfig);// Forward the new configuration the drawer toggle component.if (mDrawerToggle != null) {mDrawerToggle.onConfigurationChanged(newConfig);}}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {if (mDrawerToggle != null && mDrawerToggle.onOptionsItemSelected(item)) {return true;}return super.onOptionsItemSelected(item);}private ActionBar getActionBar() {return ((AppCompatActivity) getActivity()).getSupportActionBar();}/*** Callbacks interface that all activities using this fragment must implement.*/public interface NavigationDrawerCallbacks {/*** Called when an item in the navigation drawer is selected.*/void onNavigationDrawerItemSelected(int position);}/** Populates the navigation drawer with the appropriate items. */public void populateNavDrawer() {mNavDrawerItems.clear();mNavDrawerItems.add(NAVDRAWER_ITEM_STATUS);mNavDrawerItems.add(NAVDRAWER_ITEM_MAP);mNavDrawerItems.add(NAVDRAWER_ITEM_SKY);mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL);mNavDrawerItems.add(NAVDRAWER_ITEM_INJECT_XTRA_DATA);mNavDrawerItems.add(NAVDRAWER_ITEM_INJECT_TIME_DATA);mNavDrawerItems.add(NAVDRAWER_ITEM_CLEAR_AIDING_DATA);mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR);mNavDrawerItems.add(NAVDRAWER_ITEM_OPEN_SOURCE);mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR);mNavDrawerItems.add(NAVDRAWER_ITEM_SETTINGS);mNavDrawerItems.add(NAVDRAWER_ITEM_HELP);createNavDrawerItems();}private void createNavDrawerItems() {if (mDrawerItemsListContainer == null || getActivity() == null) {return;}// Set background color of nav drawerif (Application.getPrefs().getBoolean(getString(R.string.pref_key_dark_theme), false)) {mDrawerItemsListContainer.setBackgroundColor(getContext().getResources().getColor(R.color.navdrawer_background_dark));}// Populate viewsmNavDrawerItemViews = new View[mNavDrawerItems.size()];int i = 0;LinearLayout listLayout = mDrawerItemsListContainer.findViewById(R.id.navdrawer_items_list);listLayout.removeAllViews();for (int itemId : mNavDrawerItems) {mNavDrawerItemViews[i] = makeNavDrawerItem(itemId, listLayout);listLayout.addView(mNavDrawerItemViews[i]);++i;}}private View makeNavDrawerItem(final int itemId, ViewGroup container) {boolean selected = mCurrentSelectedPosition == itemId;int layoutToInflate;if (itemId == NAVDRAWER_ITEM_SEPARATOR) {layoutToInflate = R.layout.navdrawer_separator;} else if (itemId == NAVDRAWER_ITEM_SEPARATOR_SPECIAL) {layoutToInflate = R.layout.navdrawer_separator_special;} else {layoutToInflate = R.layout.navdrawer_item;}View view = getActivity().getLayoutInflater().inflate(layoutToInflate, container, false);if (isSeparator(itemId)) {// we are doneUIUtils.setAccessibilityIgnore(view);return view;}if (Application.getPrefs().getBoolean(getString(R.string.pref_key_dark_theme), false)&& layoutToInflate == R.layout.navdrawer_item) {// Dark themeview.setBackgroundResource(R.drawable.navdrawer_item_selectable_dark);}ImageView iconView = view.findViewById(R.id.icon);TextView titleView = view.findViewById(R.id.title);ImageView secondaryIconView = view.findViewById(R.id.secondary_icon);int iconId = itemId >= 0 && itemId < NAVDRAWER_ICON_RES_ID.length ?NAVDRAWER_ICON_RES_ID[itemId] : 0;int titleId = itemId >= 0 && itemId < NAVDRAWER_TITLE_RES_ID.length ?NAVDRAWER_TITLE_RES_ID[itemId] : 0;int secondaryIconId = itemId >= 0 && itemId < NAVDRAWER_ICON_SECONDARY_RES_ID.length ?NAVDRAWER_ICON_SECONDARY_RES_ID[itemId] : 0;// set icon and texticonView.setVisibility(iconId > 0 ? View.VISIBLE : View.GONE);if (iconId > 0) {iconView.setImageResource(iconId);}titleView.setText(getString(titleId));// Secondary iconsecondaryIconView.setVisibility(secondaryIconId > 0 ? View.VISIBLE : View.GONE);if (secondaryIconId > 0) {secondaryIconView.setImageResource(secondaryIconId);}formatNavDrawerItem(view, itemId, selected);view.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {selectItem(itemId);}});return view;}private void formatNavDrawerItem(View view, int itemId, boolean selected) {if (isSeparator(itemId)) {// Don't do any formattingreturn;}ImageView iconView = view.findViewById(R.id.icon);TextView titleView = view.findViewById(R.id.title);ImageView secondaryIconView = view.findViewById(R.id.secondary_icon);/*** Configure its appearance according to whether or not it's selected.  Certain items* (e.g., Settings) don't get formatted upon selection, since they open a new activity.*/if (selected) {if (isNewActivityItem(itemId)) {// Don't change any formatting, since this is a category that launches a new activityreturn;} else {// Show the category as highlighted by changing background, text, and icon colorview.setSelected(true);titleView.setTextColor(getResources().getColor(R.color.navdrawer_text_color_selected));iconView.setColorFilter(getResources().getColor(R.color.navdrawer_icon_tint_selected));secondaryIconView.setColorFilter(getResources().getColor(R.color.navdrawer_icon_tint_selected));}} else {// Show the category as not highlighted, if its not currently selectedif (itemId != mCurrentSelectedPosition) {view.setSelected(false);if (Application.getPrefs().getBoolean(getString(R.string.pref_key_dark_theme), false)) {// Dark themetitleView.setTextColor(getResources().getColor(R.color.navdrawer_text_color_dark));iconView.setColorFilter(getResources().getColor(R.color.navdrawer_icon_tint_dark));secondaryIconView.setColorFilter(getResources().getColor(R.color.navdrawer_icon_tint_dark));} else {// Light themetitleView.setTextColor(getResources().getColor(R.color.navdrawer_text_color_light));iconView.setColorFilter(getResources().getColor(R.color.navdrawer_icon_tint_light));secondaryIconView.setColorFilter(getResources().getColor(R.color.navdrawer_icon_tint_light));}}}}private boolean isSeparator(int itemId) {return itemId == NAVDRAWER_ITEM_SEPARATOR || itemId == NAVDRAWER_ITEM_SEPARATOR_SPECIAL;}/*** Returns true if this is an item that should not allow selection (e.g., Settings),* because they launch a new Activity and aren't part of this screen, false if its selectable* and changes the current UI via a new fragment** @return true if this is an item that should not allow selection (e.g., Settings),* because they launch a new Activity and aren't part of this screen, false if its selectable* and changes the current UI via a new fragment*/private boolean isNewActivityItem(int itemId) {return itemId == NAVDRAWER_ITEM_SETTINGS ||itemId == NAVDRAWER_ITEM_HELP ||itemId == NAVDRAWER_ITEM_OPEN_SOURCE ||itemId == NAVDRAWER_ITEM_INJECT_XTRA_DATA ||itemId == NAVDRAWER_ITEM_INJECT_TIME_DATA ||itemId == NAVDRAWER_ITEM_CLEAR_AIDING_DATA;}}",gpstest/GPSTest/src/main/java/com/android/gpstest/NavigationDrawerFragment.java
1147,"<?xml version=""1.0"" encoding=""utf-8""?><!-- Copyright (C) 2010-2018 The Android Open Source Project, Sean J. BarbeauLicensed under the Apache License, Version 2.0 (the ""License"");you may not use this file except in compliance with the License.You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an ""AS IS"" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.--><selector xmlns:android=""http://schemas.android.com/apk/res/android""android:exitFadeDuration=""@android:integer/config_mediumAnimTime""><item android:state_pressed=""true""android:drawable=""@color/navdrawer_background_color_selected_dark""/><item android:state_selected=""true""android:drawable=""@color/navdrawer_background_color_selected_dark""/><item android:drawable=""@android:color/transparent""/></selector>",gpstest/GPSTest/src/main/res/drawable/navdrawer_item_selectable_dark.xml
1147,"<?xml version=""1.0"" encoding=""utf-8""?><!-- Copyright (C) 2010-2018 The Android Open Source Project, Sean J. BarbeauLicensed under the Apache License, Version 2.0 (the ""License"");you may not use this file except in compliance with the License.You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an ""AS IS"" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.--><selector xmlns:android=""http://schemas.android.com/apk/res/android""android:exitFadeDuration=""@android:integer/config_mediumAnimTime""><item android:state_pressed=""true""android:drawable=""@color/navdrawer_background_color_selected_light""/><item android:state_selected=""true""android:drawable=""@color/navdrawer_background_color_selected_light""/><item android:drawable=""@android:color/transparent""/></selector>",gpstest/GPSTest/src/main/res/drawable/navdrawer_item_selectable_light.xml
1147,"<!--Copyright 2014-2018 Google Inc., University of South Florida (sjbarbeau@gmail.com)All rights reserved.Licensed under the Apache License, Version 2.0 (the ""License"");you may not use this file except in compliance with the License.You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an ""AS IS"" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.--><RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""style=""@style/NavDrawerListItem.Light""android:paddingLeft=""@dimen/activity_horizontal_margin""android:paddingRight=""@dimen/activity_horizontal_margin""android:layout_width=""match_parent""android:focusable=""true""android:layout_height=""48dp""><ImageViewandroid:id=""@+id/icon""android:layout_alignParentStart=""true""android:layout_alignParentLeft=""true""android:layout_height=""24dp""android:layout_width=""24dp""android:layout_marginRight=""32dp""android:layout_centerVertical=""true"" /><TextViewandroid:id=""@+id/title""android:layout_width=""wrap_content""android:layout_height=""wrap_content""android:layout_toEndOf=""@+id/icon""android:layout_toRightOf=""@+id/icon""android:layout_centerVertical=""true""android:fontFamily=""@string/font_fontFamily_medium""android:textStyle=""@integer/font_textStyle_medium""android:textSize=""14sp"" /><ImageViewandroid:id=""@+id/secondary_icon""android:layout_height=""24dp""android:layout_width=""24dp""android:layout_centerVertical=""true""android:layout_alignParentEnd=""true""android:layout_alignParentRight=""true""/></RelativeLayout>",gpstest/GPSTest/src/main/res/layout/navdrawer_item.xml
1147,"<?xml version=""1.0"" encoding=""utf-8""?><!-- Copyright (C) 2016 Sean J. Barbeau (sjbarbeau@gmail.com)Licensed under the Apache License, Version 2.0 (the ""License"");you may not use this file except in compliance with the License.You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an ""AS IS"" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.--><resources><!-- GPSTest Theme --><color name=""colorPrimary"">#3F51B5</color><color name=""colorPrimaryDark"">#303F9F</color><color name=""colorAccent"">#C5CAE9</color><!-- Navigation Drawer (Shared for Light and Dark Themes) --><color name=""navdrawer_text_color_selected"">@color/colorPrimary</color><color name=""navdrawer_icon_tint_selected"">@color/colorPrimary</color><!-- Navigation Drawer (Light Theme) --><color name=""navdrawer_background_light"">@android:color/white</color><color name=""navdrawer_text_color_light"">@color/body_text_1_light</color><color name=""navdrawer_icon_tint_light"">#888</color><color name=""navdrawer_background_color_selected_light"">#11000000</color><!-- Navigation Drawer (Dark Theme) --><color name=""navdrawer_background_dark"">@color/cardview_dark_background</color><color name=""navdrawer_text_color_dark"">@color/body_text_1_dark</color><color name=""navdrawer_icon_tint_dark"">#888</color><color name=""navdrawer_background_color_selected_dark"">#99000000</color><!-- Text colors --><color name=""body_text_1_light"">#de000000</color><color name=""body_text_2_light"">#8a000000</color><color name=""body_text_1_dark"">#deffffff</color><!-- GNSS Sky View --><color name=""not_in_view_sat"">#11000000</color></resources>",gpstest/GPSTest/src/main/res/values/colors.xml
1147,"<?xml version=""1.0"" encoding=""utf-8""?><!-- Copyright (C) 2008 The Android Open Source ProjectLicensed under the Apache License, Version 2.0 (the ""License"");you may not use this file except in compliance with the License.You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an ""AS IS"" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.--><resources><!-- Base application theme --><style name=""AppTheme"" parent=""Theme.AppCompat.Light.DarkActionBar""><!-- Customize your theme here. --><item name=""colorPrimary"">@color/colorPrimary</item><item name=""colorPrimaryDark"">@color/colorPrimaryDark</item><item name=""colorAccent"">@color/colorAccent</item></style><style name=""AppTheme.Dark"" parent=""Theme.AppCompat""><!-- Customize your theme here. --><item name=""colorPrimary"">@color/colorPrimary</item><item name=""colorPrimaryDark"">@color/colorPrimaryDark</item><item name=""colorAccent"">@color/colorAccent</item></style><style name=""AppTheme.NoActionBar""><item name=""windowActionBar"">false</item><item name=""windowNoTitle"">true</item></style><style name=""AppTheme.Dark.NoActionBar""><item name=""windowActionBar"">false</item><item name=""windowNoTitle"">true</item></style><style name=""AppTheme.AppBarOverlay"" parent=""ThemeOverlay.AppCompat.Dark.ActionBar""/><style name=""AppTheme.PopupOverlay"" parent=""ThemeOverlay.AppCompat.Light""/><style name=""AppTheme.PopupOverlay.Dark"" parent=""ThemeOverlay.AppCompat.Light""/><style name=""AppTheme.Preferences"" parent=""Theme.AppCompat.Light.DarkActionBar""><!-- Customize your theme here. --><item name=""colorPrimary"">@color/colorPrimary</item><item name=""colorPrimaryDark"">@color/colorPrimaryDark</item><item name=""colorAccent"">@color/colorAccent</item></style><!-- Navigation Drawer --><style name=""NavDrawerListItem.Light"" parent=""Widget.AppCompat.ListView.Menu""><item name=""android:background"">@drawable/navdrawer_item_selectable_light</item><item name=""android:shape"">oval</item></style><!-- Dark style is set programmatically in NavigationDrawerFragment instead of via style - see #119 --><!-- GNSS Status view --><style name=""info_label""><item name=""android:layout_height"">wrap_content</item><item name=""android:layout_width"">wrap_content</item><item name=""android:textSize"">@dimen/status_text_size</item><item name=""android:textStyle"">bold</item><item name=""android:paddingRight"">4dip</item></style><style name=""info_value""><item name=""android:layout_height"">wrap_content</item><item name=""android:layout_width"">wrap_content</item><item name=""android:textSize"">@dimen/status_text_size</item><item name=""android:textStyle"">normal</item></style></resources>",gpstest/GPSTest/src/main/res/values/styles.xml
128,"/** Copyright (C) 2017-2020 Jakob Nixdorf* Copyright (C) 2015 Bruno Bierbaumer** Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the ""Software""), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:** The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.** THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE* SOFTWARE.*/package org.shadowice.flocke.andotp.Activities;import android.animation.ObjectAnimator;import android.app.AlertDialog;import android.app.KeyguardManager;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Configuration;import android.os.Bundle;import android.os.CountDownTimer;import android.os.Handler;import android.preference.PreferenceManager;import androidx.core.view.GravityCompat;import androidx.drawerlayout.widget.DrawerLayout;import androidx.appcompat.app.ActionBarDrawerToggle;import androidx.lifecycle.DefaultLifecycleObserver;import androidx.lifecycle.LifecycleOwner;import androidx.lifecycle.ProcessLifecycleOwner;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.appcompat.widget.SearchView;import androidx.appcompat.widget.Toolbar;import androidx.recyclerview.widget.ItemTouchHelper;import android.text.TextUtils;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.WindowManager;import android.view.animation.LinearInterpolator;import android.widget.AdapterView;import android.widget.CheckedTextView;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.Toast;import com.google.zxing.integration.android.IntentIntegrator;import com.google.zxing.integration.android.IntentResult;import com.leinardi.android.speeddial.SpeedDialActionItem;import com.leinardi.android.speeddial.SpeedDialView;import org.shadowice.flocke.andotp.Database.Entry;import org.shadowice.flocke.andotp.R;import org.shadowice.flocke.andotp.Utilities.Constants;import org.shadowice.flocke.andotp.Utilities.EncryptionHelper;import org.shadowice.flocke.andotp.Utilities.KeyStoreHelper;import org.shadowice.flocke.andotp.Utilities.NotificationHelper;import org.shadowice.flocke.andotp.Utilities.ScanQRCodeFromFile;import org.shadowice.flocke.andotp.Utilities.TokenCalculator;import org.shadowice.flocke.andotp.View.EntriesCardAdapter;import org.shadowice.flocke.andotp.View.ItemTouchHelper.SimpleItemTouchHelperCallback;import org.shadowice.flocke.andotp.Dialogs.ManualEntryDialog;import org.shadowice.flocke.andotp.View.TagsAdapter;import java.util.ArrayList;import java.util.HashMap;import javax.crypto.SecretKey;import static org.shadowice.flocke.andotp.Utilities.Constants.AuthMethod;import static org.shadowice.flocke.andotp.Utilities.Constants.EncryptionType;import static org.shadowice.flocke.andotp.Utilities.Constants.SortMode;public class MainActivity extends BaseActivityimplements SharedPreferences.OnSharedPreferenceChangeListener {public static long animatorDuration = 1000;private static final String INTENT_SCAN_QR = ""org.shadowice.flocke.andotp.intent.SCAN_QR"";private static final String INTENT_IMPORT_QR = ""org.shadowice.flocke.andotp.intent.IMPORT_QR"";private static final String INTENT_ENTER_DETAILS = ""org.shadowice.flocke.andotp.intent.ENTER_DETAILS"";private EntriesCardAdapter adapter;private SpeedDialView speedDial;private MenuItem sortMenu;private SimpleItemTouchHelperCallback touchHelperCallback;private EncryptionType encryptionType = EncryptionType.KEYSTORE;private boolean requireAuthentication = false;private boolean recreateActivity = false;private boolean cacheEncKey = false;private Handler handler;private Runnable handlerTask;private DrawerLayout tagsDrawerLayout;private ListView tagsDrawerListView;private TagsAdapter tagsDrawerAdapter;private ActionBarDrawerToggle tagsToggle;private String filterString;private CountDownTimer countDownTimer;// QR code scanningprivate void scanQRCode(){new IntentIntegrator(MainActivity.this).setOrientationLocked(false).setBeepEnabled(false).setCaptureActivity(SecureCaptureActivity.class).initiateScan();}private void showFirstTimeWarning() {Intent introIntent = new Intent(this, IntroScreenActivity.class);startActivityForResult(introIntent, Constants.INTENT_MAIN_INTRO);}public void authenticate(int messageId) {AuthMethod authMethod = settings.getAuthMethod();if (authMethod == AuthMethod.DEVICE) {KeyguardManager km = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);if (km.isKeyguardSecure()) {Intent authIntent = km.createConfirmDeviceCredentialIntent(getString(R.string.dialog_title_auth), getString(R.string.dialog_msg_auth));startActivityForResult(authIntent, Constants.INTENT_MAIN_AUTHENTICATE);}} else if (authMethod == AuthMethod.PASSWORD || authMethod == AuthMethod.PIN) {Intent authIntent = new Intent(this, AuthenticateActivity.class);authIntent.putExtra(Constants.EXTRA_AUTH_MESSAGE, messageId);startActivityForResult(authIntent, Constants.INTENT_MAIN_AUTHENTICATE);}}private void restoreSortMode() {if (settings != null && adapter != null && touchHelperCallback != null) {SortMode mode = settings.getSortMode();adapter.setSortMode(mode);if (mode == SortMode.UNSORTED)touchHelperCallback.setDragEnabled(true);elsetouchHelperCallback.setDragEnabled(false);}}private void saveSortMode(SortMode mode) {if (settings != null)settings.setSortMode(mode);}private void populateAdapter() {adapter.loadEntries();tagsDrawerAdapter.setTags(TagsAdapter.createTagsMap(adapter.getEntries(), settings));adapter.filterByTags(tagsDrawerAdapter.getActiveTags());}// Initialize the main application@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setTitle(R.string.app_name);if (! settings.getScreenshotsEnabled())getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);setContentView(R.layout.activity_main);Toolbar toolbar = findViewById(R.id.toolbar);setSupportActionBar(toolbar);PreferenceManager.setDefaultValues(this, R.xml.preferences, false);settings.registerPreferenceChangeListener(this);encryptionType = settings.getEncryption();if (settings.getAuthMethod() != AuthMethod.NONE && savedInstanceState == null)requireAuthentication = true;setBroadcastCallback(new BroadcastReceivedCallback() {@Overridepublic void onReceivedScreenOff() {if (settings.getRelockOnScreenOff() && settings.getAuthMethod() != AuthMethod.NONE)requireAuthentication = true;}});ProcessLifecycleOwner.get().getLifecycle().addObserver(new ProcessLifecycleObserver());if (! settings.getFirstTimeWarningShown()) {showFirstTimeWarning();}speedDial = findViewById(R.id.speedDial);speedDial.inflate(R.menu.menu_fab);speedDial.getMainFab().setContentDescription(getString(R.string.button_add));speedDial.setOnActionSelectedListener(new SpeedDialView.OnActionSelectedListener() {@Overridepublic boolean onActionSelected(SpeedDialActionItem speedDialActionItem) {switch (speedDialActionItem.getId()) {case R.id.fabScanQR:scanQRCode();return false;case R.id.fabEnterDetails:ManualEntryDialog.show(MainActivity.this, settings, adapter);return false;case R.id.fabScanQRFromImage:showOpenFileSelector(Constants.INTENT_MAIN_QR_OPEN_IMAGE);return false;default:return false;}}});speedDial.setOnChangeListener(new SpeedDialView.OnChangeListener() {@Overridepublic boolean onMainActionSelected() {return false;}@Overridepublic void onToggleChanged(boolean isOpen) {if (isOpen) {speedDial.getMainFab().setContentDescription(getString(R.string.button_close_menu));} else {speedDial.getMainFab().setContentDescription(getString(R.string.button_add));}}});final ProgressBar progressBar = findViewById(R.id.progressBar);progressBar.setVisibility(settings.isHideGlobalTimeoutEnabled() ? View.GONE : View.VISIBLE);RecyclerView recList = findViewById(R.id.cardList);recList.setHasFixedSize(true);LinearLayoutManager llm = new LinearLayoutManager(this);llm.setOrientation(LinearLayoutManager.VERTICAL);recList.setLayoutManager(llm);tagsDrawerAdapter = new TagsAdapter(this, new HashMap<String, Boolean>());adapter = new EntriesCardAdapter(this, tagsDrawerAdapter);if (savedInstanceState != null) {byte[] encKey = savedInstanceState.getByteArray(""encKey"");if (encKey != null) {adapter.setEncryptionKey(EncryptionHelper.generateSymmetricKey(encKey));requireAuthentication = false;}}recList.setAdapter(adapter);touchHelperCallback = new SimpleItemTouchHelperCallback(adapter);ItemTouchHelper touchHelper = new ItemTouchHelper(touchHelperCallback);touchHelper.attachToRecyclerView(recList);NotificationHelper.initializeNotificationChannels(this);restoreSortMode();float durationScale = android.provider.Settings.Global.getFloat(this.getContentResolver(), android.provider.Settings.Global.ANIMATOR_DURATION_SCALE, 0);if (durationScale == 0)durationScale = 1;animatorDuration = (long) (1000 / durationScale);adapter.setCallback(new EntriesCardAdapter.Callback() {@Overridepublic void onMoveEventStart() {stopUpdater();}@Overridepublic void onMoveEventStop() {startUpdater();}});handler = new Handler();handlerTask = new Runnable(){@Overridepublic void run() {if (!settings.isHideGlobalTimeoutEnabled()) {int progress = (int) (TokenCalculator.TOTP_DEFAULT_PERIOD - (System.currentTimeMillis() / 1000) % TokenCalculator.TOTP_DEFAULT_PERIOD);progressBar.setProgress(progress * 100);ObjectAnimator animation = ObjectAnimator.ofInt(progressBar, ""progress"", (progress - 1) * 100);animation.setDuration(animatorDuration);animation.setInterpolator(new LinearInterpolator());animation.start();}adapter.updateTimeBasedTokens();handler.postDelayed(this, 1000);}};setupDrawer();if (savedInstanceState != null) {setFilterString(savedInstanceState.getString(""filterString"", """"));}}private void checkIntent() {Intent callingIntent = getIntent();if (callingIntent != null && callingIntent.getAction() != null) {// Cache and reset the action to prevent the same intent from being evaluated multiple timesString intentAction = callingIntent.getAction();callingIntent.setAction(null);if (intentAction.equals(INTENT_SCAN_QR)) {scanQRCode();} else if (intentAction.equals(INTENT_IMPORT_QR)) {showOpenFileSelector(Constants.INTENT_MAIN_QR_OPEN_IMAGE);} else if (intentAction.equals(INTENT_ENTER_DETAILS)) {ManualEntryDialog.show(MainActivity.this, settings, adapter);} else if (intentAction.equals(Intent.ACTION_VIEW)) {try {Entry entry = new Entry(callingIntent.getDataString());entry.updateOTP();entry.setLastUsed(System.currentTimeMillis());adapter.addEntry(entry);Toast.makeText(this, R.string.toast_intent_creation_succeeded, Toast.LENGTH_LONG).show();} catch (Exception e) {Toast.makeText(this, R.string.toast_intent_creation_failed, Toast.LENGTH_LONG).show();}}}}@Overrideprotected void onPostCreate(Bundle savedInstanceState) {super.onPostCreate(savedInstanceState);tagsToggle.syncState();}// Controls for the updater background taskpublic void stopUpdater() {handler.removeCallbacks(handlerTask);}public void startUpdater() {handler.post(handlerTask);}@Overridepublic void onResume() {super.onResume();if (requireAuthentication) {if (settings.getAuthMethod() != AuthMethod.NONE) {requireAuthentication = false;authenticate(R.string.auth_msg_authenticate);}} else {if (settings.getFirstTimeWarningShown()) {if (adapter.getEncryptionKey() == null) {updateEncryption(null);} else {populateAdapter();}checkIntent();}if (setCountDownTimerNow())countDownTimer.start();}if (filterString != null) {// ensure the current filter string is applied after a resumesetFilterString(this.filterString);}View cardList = findViewById(R.id.cardList);if(cardList.getVisibility() == View.INVISIBLE)cardList.setVisibility(View.VISIBLE);startUpdater();}@Overridepublic void onPause() {if(settings.getAuthMethod() == AuthMethod.DEVICE)runOnUiThread(new Runnable() {@Overridepublic void run() {findViewById(R.id.cardList).setVisibility(View.INVISIBLE);}});super.onPause();stopUpdater();if (countDownTimer != null)countDownTimer.cancel();}@Overrideprotected void onSaveInstanceState(Bundle outState) {super.onSaveInstanceState(outState);outState.putString(""filterString"", filterString);if (cacheEncKey) {outState.putByteArray(""encKey"", adapter.getEncryptionKey().getEncoded());cacheEncKey = false;}}public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {if (key.equals(getString(R.string.settings_key_label_size)) ||key.equals(getString(R.string.settings_key_label_scroll)) ||key.equals(getString(R.string.settings_key_split_group_size)) ||key.equals(getString(R.string.settings_key_thumbnail_size))) {adapter.notifyDataSetChanged();} else if (key.equals(getString(R.string.settings_key_search_includes))) {adapter.clearFilter();} else if (key.equals(getString(R.string.settings_key_tap_single)) ||key.equals(getString(R.string.settings_key_tap_double)) ||key.equals(getString(R.string.settings_key_theme)) ||key.equals(getString(R.string.settings_key_lang)) ||key.equals(getString(R.string.settings_key_enable_screenshot)) ||key.equals(getString(R.string.settings_key_tag_functionality)) ||key.equals(getString(R.string.settings_key_label_highlight_token)) ||key.equals(getString(R.string.settings_key_card_layout)) ||key.equals(getString(R.string.settings_key_hide_global_timeout))) {recreateActivity = true;}}@Overridepublic void onConfigurationChanged(Configuration newConfig) {super.onConfigurationChanged(newConfig);tagsToggle.onConfigurationChanged(newConfig);}// Activity results@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent intent) {super.onActivityResult(requestCode, resultCode, intent);IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, intent);if(result != null) {if(result.getContents() != null) {addQRCode(result.getContents());}} else if (requestCode == Constants.INTENT_MAIN_BACKUP && resultCode == RESULT_OK) {if (intent.getBooleanExtra(""reload"", false)) {adapter.loadEntries();refreshTags();}} else if (requestCode == Constants.INTENT_MAIN_SETTINGS && resultCode == RESULT_OK) {boolean encryptionChanged = intent.getBooleanExtra(Constants.EXTRA_SETTINGS_ENCRYPTION_CHANGED, false);byte[] newKey = intent.getByteArrayExtra(Constants.EXTRA_SETTINGS_ENCRYPTION_KEY);if (encryptionChanged)updateEncryption(newKey);if (recreateActivity) {cacheEncKey = true;recreate();}} else if (requestCode == Constants.INTENT_MAIN_AUTHENTICATE) {if (resultCode != RESULT_OK) {Toast.makeText(getBaseContext(), R.string.toast_auth_failed_fatal, Toast.LENGTH_LONG).show();finishAndRemoveTask();} else {requireAuthentication = false;byte[] authKey = null;if (intent != null)authKey = intent.getByteArrayExtra(Constants.EXTRA_AUTH_PASSWORD_KEY);updateEncryption(authKey);}} else if (requestCode == Constants.INTENT_MAIN_QR_OPEN_IMAGE && resultCode == RESULT_OK) {if (intent != null) {addQRCode(ScanQRCodeFromFile.scanQRImage(this, intent.getData()));}}}private void updateEncryption(byte[] newKey) {SecretKey encryptionKey = null;encryptionType = settings.getEncryption();if (encryptionType == EncryptionType.KEYSTORE) {encryptionKey = KeyStoreHelper.loadEncryptionKeyFromKeyStore(this, false);} else if (encryptionType == EncryptionType.PASSWORD) {if (newKey != null && newKey.length > 0) {encryptionKey = EncryptionHelper.generateSymmetricKey(newKey);} else {authenticate(R.string.auth_msg_confirm_encryption);}}if (encryptionKey != null)adapter.setEncryptionKey(encryptionKey);populateAdapter();}// Options menu@Overridepublic boolean onCreateOptionsMenu(Menu menu) {getMenuInflater().inflate(R.menu.menu_main, menu);sortMenu = menu.findItem(R.id.menu_sort);if (adapter != null) {SortMode mode = adapter.getSortMode();if (mode == SortMode.UNSORTED) {sortMenu.setIcon(R.drawable.ic_sort_inverted_white);menu.findItem(R.id.menu_sort_none).setChecked(true);} else if (mode == SortMode.ISSUER) {sortMenu.setIcon(R.drawable.ic_sort_inverted_label_white);menu.findItem(R.id.menu_sort_issuer).setChecked(true);} else if (mode == SortMode.LABEL) {sortMenu.setIcon(R.drawable.ic_sort_inverted_label_white);menu.findItem(R.id.menu_sort_label).setChecked(true);} else if (mode == SortMode.LAST_USED) {sortMenu.setIcon(R.drawable.ic_sort_inverted_time_white);menu.findItem(R.id.menu_sort_last_used).setChecked(true);} else if (mode == SortMode.MOST_USED) {sortMenu.setIcon(R.drawable.ic_sort_inverted_time_white);menu.findItem(R.id.menu_sort_most_used).setChecked(true);}}MenuItem searchItem = menu.findItem(R.id.menu_search);SearchView searchView = (SearchView) searchItem.getActionView();searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {@Overridepublic boolean onQueryTextSubmit(String query) {return false;}@Overridepublic boolean onQueryTextChange(String newText) {setFilterString(newText);return false;}});searchItem.setOnActionExpandListener(new MenuItem.OnActionExpandListener() {@Overridepublic boolean onMenuItemActionExpand(MenuItem menuItem) {speedDial.setVisibility(View.GONE);touchHelperCallback.setDragEnabled(false);if (sortMenu != null)sortMenu.setVisible(false);return true;}@Overridepublic boolean onMenuItemActionCollapse(MenuItem menuItem) {speedDial.setVisibility(View.VISIBLE);if (adapter == null || adapter.getSortMode() == SortMode.UNSORTED)touchHelperCallback.setDragEnabled(true);if (sortMenu != null)sortMenu.setVisible(true);return true;}});return true;}private void setFilterString(String newText) {if (newText.isEmpty())adapter.filterByTags(tagsDrawerAdapter.getActiveTags());elseadapter.getFilter().filter(newText);this.filterString = newText;}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {int id = item.getItemId();if (id == R.id.action_backup) {Intent backupIntent = new Intent(this, BackupActivity.class);backupIntent.putExtra(Constants.EXTRA_BACKUP_ENCRYPTION_KEY, adapter.getEncryptionKey().getEncoded());startActivityForResult(backupIntent, Constants.INTENT_MAIN_BACKUP);} else if (id == R.id.action_settings) {Intent settingsIntent = new Intent(this, SettingsActivity.class);if (adapter.getEncryptionKey() != null)settingsIntent.putExtra(Constants.EXTRA_SETTINGS_ENCRYPTION_KEY, adapter.getEncryptionKey().getEncoded());startActivityForResult(settingsIntent, Constants.INTENT_MAIN_SETTINGS);} else if (id == R.id.action_about){Intent aboutIntent = new Intent(this, AboutActivity.class);startActivity(aboutIntent);return true;} else if (id == R.id.menu_sort_none) {item.setChecked(true);sortMenu.setIcon(R.drawable.ic_sort_inverted_white);saveSortMode(SortMode.UNSORTED);if (adapter != null) {adapter.setSortMode(SortMode.UNSORTED);touchHelperCallback.setDragEnabled(true);}} else if (id == R.id.menu_sort_issuer) {item.setChecked(true);sortMenu.setIcon(R.drawable.ic_sort_inverted_label_white);saveSortMode(SortMode.ISSUER);if(adapter != null) {adapter.setSortMode(SortMode.ISSUER);touchHelperCallback.setDragEnabled(false);}} else if (id == R.id.menu_sort_label) {item.setChecked(true);sortMenu.setIcon(R.drawable.ic_sort_inverted_label_white);saveSortMode(SortMode.LABEL);if (adapter != null) {adapter.setSortMode(SortMode.LABEL);touchHelperCallback.setDragEnabled(false);}} else if (id == R.id.menu_sort_last_used) {item.setChecked(true);sortMenu.setIcon(R.drawable.ic_sort_inverted_time_white);saveSortMode(SortMode.LAST_USED);if (adapter != null) {adapter.setSortMode(SortMode.LAST_USED);touchHelperCallback.setDragEnabled(false);}if (! settings.getUsedTokensDialogShown())showUsedTokensDialog();} else if (id == R.id.menu_sort_most_used) {item.setChecked(true);sortMenu.setIcon(R.drawable.ic_sort_inverted_time_white);saveSortMode(SortMode.MOST_USED);if (adapter != null) {adapter.setSortMode(SortMode.MOST_USED);touchHelperCallback.setDragEnabled(false);}if (! settings.getUsedTokensDialogShown())showUsedTokensDialog();} else if (tagsToggle.onOptionsItemSelected(item)) {return true;}return super.onOptionsItemSelected(item);}private void showUsedTokensDialog() {AlertDialog.Builder builder = new AlertDialog.Builder(this);builder.setTitle(R.string.dialog_title_used_tokens).setMessage(R.string.dialog_msg_used_tokens).setPositiveButton(android.R.string.ok, (DialogInterface dialogInterface, int i) -> settings.setUsedTokensDialogShown(true)).create().show();}private void setupDrawer() {tagsDrawerListView = findViewById(R.id.tags_list_in_drawer);tagsDrawerLayout = findViewById(R.id.drawer_layout);tagsToggle = new ActionBarDrawerToggle(this, tagsDrawerLayout, R.string.drawer_open, R.string.drawer_close) {@Overridepublic void onDrawerOpened(View drawerView) {super.onDrawerOpened(drawerView);getSupportActionBar().setTitle(R.string.label_tags);invalidateOptionsMenu();}@Overridepublic void onDrawerClosed(View view) {super.onDrawerClosed(view);getSupportActionBar().setTitle(R.string.app_name);invalidateOptionsMenu();}};tagsToggle.setDrawerIndicatorEnabled(true);tagsDrawerLayout.addDrawerListener(tagsToggle);final CheckedTextView noTagsButton = findViewById(R.id.no_tags_entries);final CheckedTextView allTagsButton = findViewById(R.id.all_tags_in_drawer);allTagsButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {CheckedTextView checkedTextView = ((CheckedTextView)view);checkedTextView.setChecked(!checkedTextView.isChecked());settings.setAllTagsToggle(checkedTextView.isChecked());for(int i = 0; i < tagsDrawerListView.getChildCount(); i++) {CheckedTextView childCheckBox = (CheckedTextView) tagsDrawerListView.getChildAt(i);childCheckBox.setChecked(checkedTextView.isChecked());}for (String tag: tagsDrawerAdapter.getTags()) {tagsDrawerAdapter.setTagState(tag, checkedTextView.isChecked());settings.setTagToggle(tag, checkedTextView.isChecked());}if(checkedTextView.isChecked()) {adapter.filterByTags(tagsDrawerAdapter.getActiveTags());} else {adapter.filterByTags(new ArrayList<String>());}}});allTagsButton.setChecked(settings.getAllTagsToggle());noTagsButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {CheckedTextView checkedTextView = ((CheckedTextView)view);checkedTextView.setChecked(!checkedTextView.isChecked());if(settings.getTagFunctionality() == Constants.TagFunctionality.SINGLE) {checkedTextView.setChecked(true);allTagsButton.setChecked(false);settings.setAllTagsToggle(false);for (String tag: tagsDrawerAdapter.getTags()) {settings.setTagToggle(tag, false);tagsDrawerAdapter.setTagState(tag, false);}}settings.setNoTagsToggle(checkedTextView.isChecked());adapter.filterByTags(tagsDrawerAdapter.getActiveTags());}});noTagsButton.setChecked(settings.getNoTagsToggle());tagsDrawerListView.setAdapter(tagsDrawerAdapter);tagsDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {CheckedTextView checkedTextView = ((CheckedTextView)view);if(settings.getTagFunctionality() == Constants.TagFunctionality.SINGLE) {allTagsButton.setChecked(false);settings.setAllTagsToggle(false);noTagsButton.setChecked(false);settings.setNoTagsToggle(false);for (String tag: tagsDrawerAdapter.getTags()) {settings.setTagToggle(tag, false);tagsDrawerAdapter.setTagState(tag, false);}checkedTextView.setChecked(true);}else {checkedTextView.setChecked(!checkedTextView.isChecked());}settings.setTagToggle(checkedTextView.getText().toString(), checkedTextView.isChecked());tagsDrawerAdapter.setTagState(checkedTextView.getText().toString(), checkedTextView.isChecked());if (! checkedTextView.isChecked()) {allTagsButton.setChecked(false);settings.setAllTagsToggle(false);}if (tagsDrawerAdapter.allTagsActive()) {allTagsButton.setChecked(true);settings.setAllTagsToggle(true);}adapter.filterByTags(tagsDrawerAdapter.getActiveTags());}});adapter.filterByTags(tagsDrawerAdapter.getActiveTags());}public void refreshTags() {HashMap<String, Boolean> tagsHashMap = new HashMap<>();for(String tag: tagsDrawerAdapter.getTags()) {tagsHashMap.put(tag, false);}for(String tag: tagsDrawerAdapter.getActiveTags()) {tagsHashMap.put(tag, true);}for(String tag: adapter.getTags()) {if(!tagsHashMap.containsKey(tag))tagsHashMap.put(tag, true);}tagsDrawerAdapter.setTags(tagsHashMap);adapter.filterByTags(tagsDrawerAdapter.getActiveTags());}@Overridepublic void onUserInteraction(){super.onUserInteraction();// Refresh Blackout Timerif (countDownTimer != null)countDownTimer.cancel();if (setCountDownTimerNow())countDownTimer.start();}private boolean setCountDownTimerNow() {int secondsToBlackout = 1000 * settings.getAuthInactivityDelay();if (settings.getAuthMethod() == AuthMethod.NONE || !settings.getAuthInactivity() || secondsToBlackout == 0)return false;countDownTimer = new CountDownTimer(secondsToBlackout, 1000) {@Overridepublic void onTick(long millisUntilFinished) {}@Overridepublic void onFinish() {authenticate(R.string.auth_msg_authenticate);this.cancel();}};return true;}private void showOpenFileSelector(int intentId){Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);intent.addCategory(Intent.CATEGORY_OPENABLE);intent.setType(""image/*"");startActivityForResult(intent, intentId);}private void addQRCode(String result){if(!TextUtils.isEmpty(result)) {try {Entry e = new Entry(result);e.updateOTP();e.setLastUsed(System.currentTimeMillis());adapter.addEntry(e);refreshTags();} catch (Exception e) {Toast.makeText(this, R.string.toast_invalid_qr_code, Toast.LENGTH_LONG).show();}}}private class ProcessLifecycleObserver implements DefaultLifecycleObserver {@Overridepublic void onStop(LifecycleOwner owner) {if (MainActivity.this.settings.getRelockOnBackground())MainActivity.this.requireAuthentication = true;}}@Overridepublic boolean onKeyDown(int keyCode, KeyEvent event) {if (keyCode == KeyEvent.KEYCODE_BACK) {if (speedDial.isOpen()) {speedDial.close();return true;}if (tagsDrawerLayout.isDrawerOpen(GravityCompat.START)) {tagsDrawerLayout.closeDrawer(GravityCompat.START);return true;}return super.onKeyDown(keyCode, event);}return super.onKeyDown(keyCode, event);}@Overrideprotected void onDestroy() {settings.unregisterPreferenceChangeListener(this);super.onDestroy();}}",andOTP/app/src/main/java/org/shadowice/flocke/andotp/Activities/MainActivity.java
128,"/** Copyright (C) 2017-2020 Jakob Nixdorf** Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the ""Software""), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:** The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.** THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE* SOFTWARE.*/package org.shadowice.flocke.andotp.Activities;import android.app.backup.BackupManager;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.preference.CheckBoxPreference;import android.preference.EditTextPreference;import android.preference.ListPreference;import android.preference.Preference;import android.preference.PreferenceCategory;import android.preference.PreferenceFragment;import android.preference.PreferenceManager;import androidx.appcompat.widget.Toolbar;import android.provider.DocumentsContract;import android.view.ViewStub;import android.widget.Toast;import org.openintents.openpgp.util.OpenPgpAppPreference;import org.openintents.openpgp.util.OpenPgpKeyPreference;import org.shadowice.flocke.andotp.Database.Entry;import org.shadowice.flocke.andotp.Preferences.CredentialsPreference;import org.shadowice.flocke.andotp.R;import org.shadowice.flocke.andotp.Utilities.BackupHelper;import org.shadowice.flocke.andotp.Utilities.Constants;import org.shadowice.flocke.andotp.Utilities.DatabaseHelper;import org.shadowice.flocke.andotp.Utilities.EncryptionHelper;import org.shadowice.flocke.andotp.Utilities.KeyStoreHelper;import org.shadowice.flocke.andotp.Utilities.Settings;import org.shadowice.flocke.andotp.Utilities.UIHelper;import java.util.ArrayList;import java.util.Locale;import javax.crypto.SecretKey;import static org.shadowice.flocke.andotp.Utilities.Constants.AuthMethod;import static org.shadowice.flocke.andotp.Utilities.Constants.EncryptionType;public class SettingsActivity extends BaseActivityimplements SharedPreferences.OnSharedPreferenceChangeListener{private SettingsFragment fragment;private SharedPreferences prefs;private SecretKey encryptionKey = null;private boolean encryptionChanged = false;@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setTitle(R.string.settings_activity_title);setContentView(R.layout.activity_container);Toolbar toolbar = findViewById(R.id.container_toolbar);setSupportActionBar(toolbar);ViewStub stub = findViewById(R.id.container_stub);stub.inflate();Intent callingIntent = getIntent();byte[] keyMaterial = callingIntent.getByteArrayExtra(Constants.EXTRA_SETTINGS_ENCRYPTION_KEY);if (keyMaterial != null && keyMaterial.length > 0)encryptionKey = EncryptionHelper.generateSymmetricKey(keyMaterial);if (savedInstanceState != null) {encryptionChanged = savedInstanceState.getBoolean(Constants.EXTRA_SETTINGS_ENCRYPTION_CHANGED, false);byte[] encKey = savedInstanceState.getByteArray(Constants.EXTRA_SETTINGS_ENCRYPTION_KEY);if (encKey != null) {encryptionKey = EncryptionHelper.generateSymmetricKey(encKey);}}fragment = new SettingsFragment();getFragmentManager().beginTransaction().replace(R.id.container_content, fragment).commit();prefs = PreferenceManager.getDefaultSharedPreferences(this);prefs.registerOnSharedPreferenceChangeListener(this);}@Overrideprotected void onSaveInstanceState(Bundle outState) {super.onSaveInstanceState(outState);outState.putBoolean(Constants.EXTRA_SETTINGS_ENCRYPTION_CHANGED, encryptionChanged);outState.putByteArray(Constants.EXTRA_SETTINGS_ENCRYPTION_KEY, encryptionKey.getEncoded());}public void finishWithResult() {Intent data = new Intent();data.putExtra(Constants.EXTRA_SETTINGS_ENCRYPTION_CHANGED, encryptionChanged);if (encryptionKey != null)data.putExtra(Constants.EXTRA_SETTINGS_ENCRYPTION_KEY, encryptionKey.getEncoded());setResult(RESULT_OK, data);finish();}@Overridepublic boolean onSupportNavigateUp() {finishWithResult();return true;}@Overridepublic void onBackPressed() {finishWithResult();super.onBackPressed();}public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {BackupManager backupManager = new BackupManager(this);backupManager.dataChanged();if (key.equals(getString(R.string.settings_key_theme)) ||key.equals(getString(R.string.settings_key_lang)) ||key.equals(getString(R.string.settings_key_special_features)) ||key.equals(getString(R.string.settings_key_backup_location))) {recreate();} else if(key.equals(getString(R.string.settings_key_encryption))) {if (settings.getEncryption() != EncryptionType.PASSWORD) {if (settings.getAndroidBackupServiceEnabled()) {UIHelper.showGenericDialog(this,R.string.settings_dialog_title_android_sync,R.string.settings_dialog_msg_android_sync_disabled_encryption);}settings.setAndroidBackupServiceEnabled(false);if (fragment.useAndroidSync != null) {fragment.useAndroidSync.setEnabled(false);fragment.useAndroidSync.setChecked(false);}} else {if (fragment.useAndroidSync != null)fragment.useAndroidSync.setEnabled(true);}}fragment.updateAutoBackup();}private void generateNewEncryptionKey() {if (settings.getEncryption() == EncryptionType.KEYSTORE) {encryptionKey = KeyStoreHelper.loadEncryptionKeyFromKeyStore(this, false);encryptionChanged = true;}}private void tryEncryptionChangeWithAuth(EncryptionType newEnc) {Intent authIntent = new Intent(this, AuthenticateActivity.class);authIntent.putExtra(Constants.EXTRA_AUTH_NEW_ENCRYPTION, newEnc.name());authIntent.putExtra(Constants.EXTRA_AUTH_MESSAGE, R.string.auth_msg_confirm_encryption);startActivityForResult(authIntent, Constants.INTENT_SETTINGS_AUTHENTICATE);}private boolean tryEncryptionChange(EncryptionType newEnc, byte[] newKey) {Toast upgrading = Toast.makeText(this, R.string.settings_toast_encryption_changing, Toast.LENGTH_LONG);upgrading.show();if (DatabaseHelper.backupDatabase(this)) {ArrayList<Entry> entries;if (encryptionKey != null)entries = DatabaseHelper.loadDatabase(this, encryptionKey);elseentries = new ArrayList<>();SecretKey newEncryptionKey;if (newEnc == EncryptionType.KEYSTORE) {newEncryptionKey = KeyStoreHelper.loadEncryptionKeyFromKeyStore(this, true);} else if (newKey != null && newKey.length > 0) {newEncryptionKey = EncryptionHelper.generateSymmetricKey(newKey);} else {upgrading.cancel();DatabaseHelper.restoreDatabaseBackup(this);return false;}if (DatabaseHelper.saveDatabase(this, entries, newEncryptionKey)) {encryptionKey = newEncryptionKey;encryptionChanged = true;fragment.encryption.setValue(newEnc.name().toLowerCase());upgrading.cancel();Toast.makeText(this, R.string.settings_toast_encryption_change_success, Toast.LENGTH_LONG).show();return true;}DatabaseHelper.restoreDatabaseBackup(this);upgrading.cancel();Toast.makeText(this, R.string.settings_toast_encryption_change_failed, Toast.LENGTH_LONG).show();} else {upgrading.cancel();Toast.makeText(this, R.string.settings_toast_encryption_backup_failed, Toast.LENGTH_LONG).show();}return false;}private void requestBackupAccess() {Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION| Intent.FLAG_GRANT_WRITE_URI_PERMISSION| Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION| Intent.FLAG_GRANT_PREFIX_URI_PERMISSION);if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && settings.isBackupLocationSet())intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, settings.getBackupLocation());startActivityForResult(intent, Constants.INTENT_SETTINGS_BACKUP_LOCATION);}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if (requestCode == Constants.INTENT_SETTINGS_AUTHENTICATE) {if (resultCode == RESULT_OK) {byte[] authKey = data.getByteArrayExtra(Constants.EXTRA_AUTH_PASSWORD_KEY);String newEnc = data.getStringExtra(Constants.EXTRA_AUTH_NEW_ENCRYPTION);if (authKey != null && authKey.length > 0 && newEnc != null && !newEnc.isEmpty()) {EncryptionType newEncType = EncryptionType.valueOf(newEnc);tryEncryptionChange(newEncType, authKey);} else {Toast.makeText(this, R.string.settings_toast_encryption_no_key, Toast.LENGTH_LONG).show();}} else {Toast.makeText(this, R.string.settings_toast_encryption_auth_failed, Toast.LENGTH_LONG).show();}} else if (requestCode == Constants.INTENT_SETTINGS_BACKUP_LOCATION && resultCode == RESULT_OK) {Uri treeUri = data.getData();if (treeUri != null) {final int takeFlags = data.getFlags() & (Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);getContentResolver().takePersistableUriPermission(treeUri, takeFlags);settings.setBackupLocation(treeUri);}} else if (fragment.pgpSigningKey.handleOnActivityResult(requestCode, resultCode, data)) {// handled by OpenPgpKeyPreferencereturn;}}@Overrideprotected void onDestroy() {prefs.unregisterOnSharedPreferenceChangeListener(this);prefs = null;super.onDestroy();}public static class SettingsFragment extends PreferenceFragment {private PreferenceCategory catSecurity;private Settings settings;private ListPreference encryption;private Preference backupLocation;private ListPreference useAutoBackup;private CheckBoxPreference useAndroidSync;private OpenPgpAppPreference pgpProvider;private EditTextPreference pgpEncryptionKey;private OpenPgpKeyPreference pgpSigningKey;public void encryptionChangeWithDialog(final EncryptionType encryptionType) {AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());builder.setTitle(R.string.settings_dialog_title_warning).setMessage(R.string.settings_dialog_msg_encryption_change).setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {if (encryptionType == EncryptionType.PASSWORD)((SettingsActivity) getActivity()).tryEncryptionChangeWithAuth(encryptionType);else if (encryptionType == EncryptionType.KEYSTORE)((SettingsActivity) getActivity()).tryEncryptionChange(encryptionType, null);}}).setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {}}).create().show();}public void updateAutoBackup() {if (useAutoBackup != null) {useAutoBackup.setEnabled(BackupHelper.autoBackupType(getActivity()) == Constants.BackupType.ENCRYPTED);if (!useAutoBackup.isEnabled())useAutoBackup.setValue(Constants.AutoBackup.OFF.toString().toLowerCase(Locale.ENGLISH));if (useAutoBackup.isEnabled()) {useAutoBackup.setSummary(R.string.settings_desc_auto_backup_password_enc);} else {useAutoBackup.setSummary(R.string.settings_desc_auto_backup_requirements);}}}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);settings = new Settings(getActivity());final SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(getActivity().getBaseContext());addPreferencesFromResource(R.xml.preferences);CredentialsPreference credentialsPreference = (CredentialsPreference) findPreference(getString(R.string.settings_key_auth));credentialsPreference.setEncryptionChangeCallback(new CredentialsPreference.EncryptionChangeCallback() {@Overridepublic boolean testEncryptionChange(byte[] newKey) {return ((SettingsActivity) getActivity()).tryEncryptionChange(settings.getEncryption(), newKey);}});CheckBoxPreference blockAutofill = (CheckBoxPreference) findPreference(getString(R.string.settings_key_block_autofill));if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {blockAutofill.setEnabled(true);blockAutofill.setSummary(R.string.settings_desc_block_autofill);} else {blockAutofill.setEnabled(false);blockAutofill.setSummary(R.string.settings_desc_block_autofill_android);}// AuthenticationcatSecurity = (PreferenceCategory) findPreference(getString(R.string.settings_key_cat_security));encryption = (ListPreference) findPreference(getString(R.string.settings_key_encryption));encryption.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {@Overridepublic boolean onPreferenceChange(final Preference preference, Object o) {String newEncryption = (String) o;EncryptionType encryptionType = EncryptionType.valueOf(newEncryption.toUpperCase());EncryptionType oldEncryptionType = settings.getEncryption();AuthMethod authMethod = settings.getAuthMethod();if (encryptionType != oldEncryptionType) {if (encryptionType == EncryptionType.PASSWORD) {if (authMethod != AuthMethod.PASSWORD && authMethod != AuthMethod.PIN) {UIHelper.showGenericDialog(getActivity(), R.string.settings_dialog_title_error, R.string.settings_dialog_msg_encryption_invalid_with_auth);return false;} else {if (settings.getAuthCredentials().isEmpty()) {UIHelper.showGenericDialog(getActivity(), R.string.settings_dialog_title_error, R.string.settings_dialog_msg_encryption_invalid_without_credentials);return false;}}encryptionChangeWithDialog(EncryptionType.PASSWORD);} else if (encryptionType == EncryptionType.KEYSTORE) {encryptionChangeWithDialog(EncryptionType.KEYSTORE);}}return false;}});// Backup locationbackupLocation = findPreference(getString(R.string.settings_key_backup_location));if (settings.isBackupLocationSet()) {backupLocation.setSummary(R.string.settings_desc_backup_location_set);} else {backupLocation.setSummary(R.string.settings_desc_backup_location);}backupLocation.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {@Overridepublic boolean onPreferenceClick(Preference preference) {((SettingsActivity) getActivity()).requestBackupAccess();return true;}});// OpenPGPpgpProvider = (OpenPgpAppPreference) findPreference(getString(R.string.settings_key_openpgp_provider));pgpEncryptionKey = (EditTextPreference) findPreference(getString(R.string.settings_key_openpgp_key_encrypt));pgpSigningKey = (OpenPgpKeyPreference) findPreference(getString(R.string.settings_key_openpgp_key_sign));pgpSigningKey.setOpenPgpProvider(pgpProvider.getValue());if (pgpProvider.getValue() != null && ! pgpProvider.getValue().isEmpty()) {pgpEncryptionKey.setEnabled(true);} else {pgpEncryptionKey.setEnabled(false);}pgpProvider.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {@Overridepublic boolean onPreferenceChange(Preference preference, Object newValue) {if (newValue != null && ! ((String) newValue).isEmpty()) {pgpEncryptionKey.setEnabled(true);} else {pgpEncryptionKey.setEnabled(false);}pgpSigningKey.setOpenPgpProvider((String) newValue);return true;}});useAutoBackup = (ListPreference)findPreference(getString(R.string.settings_key_auto_backup_password_enc));updateAutoBackup();useAndroidSync = (CheckBoxPreference) findPreference(getString(R.string.settings_key_enable_android_backup_service));useAndroidSync.setEnabled(settings.getEncryption() == EncryptionType.PASSWORD);if(!useAndroidSync.isEnabled())useAndroidSync.setChecked(false);if (sharedPref.contains(getString(R.string.settings_key_special_features)) &&sharedPref.getBoolean(getString(R.string.settings_key_special_features), false)) {addPreferencesFromResource(R.xml.preferences_special);Preference clearKeyStore = findPreference(getString(R.string.settings_key_clear_keystore));clearKeyStore.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {@Overridepublic boolean onPreferenceClick(Preference preference) {AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());builder.setTitle(R.string.settings_dialog_title_clear_keystore);if (settings.getEncryption() == EncryptionType.PASSWORD)builder.setMessage(R.string.settings_dialog_msg_clear_keystore_password);else if (settings.getEncryption() == EncryptionType.KEYSTORE)builder.setMessage(R.string.settings_dialog_msg_clear_keystore_keystore);builder.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {KeyStoreHelper.wipeKeys(getActivity());if (settings.getEncryption() == EncryptionType.KEYSTORE) {DatabaseHelper.wipeDatabase(getActivity());((SettingsActivity) getActivity()).generateNewEncryptionKey();}}});builder.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {}});builder.create().show();return false;}});}}}}",andOTP/app/src/main/java/org/shadowice/flocke/andotp/Activities/SettingsActivity.java
128,"/** Copyright (C) 2017-2020 Jakob Nixdorf** Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the ""Software""), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:** The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.** THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE* SOFTWARE.*/package org.shadowice.flocke.andotp.Utilities;import android.content.Context;import android.content.SharedPreferences;import android.net.Uri;import android.preference.PreferenceManager;import android.util.Base64;import org.shadowice.flocke.andotp.Preferences.CredentialsPreference;import org.shadowice.flocke.andotp.R;import java.nio.charset.StandardCharsets;import java.security.KeyPair;import java.security.NoSuchAlgorithmException;import java.security.spec.InvalidKeySpecException;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashSet;import java.util.List;import java.util.Locale;import java.util.Set;import static org.shadowice.flocke.andotp.Utilities.Constants.AuthMethod;import static org.shadowice.flocke.andotp.Utilities.Constants.EncryptionType;import static org.shadowice.flocke.andotp.Utilities.Constants.SortMode;public class Settings {private static final List<String> newLangs = Arrays.asList(""ar"",    ""bg"",    ""ca"",    ""cs"",    ""de"",    ""el"",    ""en"",    ""es"",    ""fa"",    ""fr"",    ""gl"",    ""hi"",    ""hu"",    ""it"",    ""ja"",    ""nl"",    ""pl"",    ""pt_BR"", ""ru"",    ""sl"",    ""sv"",    ""tr"",    ""uk"",    ""zh_CN"", ""zh_TW"");private static final List<String> oldLangs = Arrays.asList(""ar_SA"", ""bg_BG"", ""ca_ES"", ""cs_CZ"", ""de_DE"", ""el_GR"", ""en_US"", ""es_ES"", ""fa_IR"", ""fr_FR"", ""gl_ES"", ""hi_IN"", ""hu_HU"", ""it_IT"", ""ja_JP"", ""nl_NL"", ""pl_PL"", ""pt_BR"", ""ru_RU"", ""sl_SI"", ""sv_SE"", ""tr_TR"", ""uk_UA"", ""zh_CN"", ""zh_TW"");private Context context;private SharedPreferences settings;public Settings(Context context) {this.context = context;this.settings = PreferenceManager.getDefaultSharedPreferences(context);migrateDeprecatedSettings();}private void migrateDeprecatedSettings() {if (settings.contains(getResString(R.string.settings_key_auth_password))) {setAuthCredentials(getString(R.string.settings_key_auth_password, """"));remove(R.string.settings_key_auth_password);}if (settings.contains(getResString(R.string.settings_key_auth_pin))) {setAuthCredentials(getString(R.string.settings_key_auth_pin, """"));remove(R.string.settings_key_auth_pin);}if (settings.contains(getResString(R.string.settings_key_locale))) {String lang = getString(R.string.settings_key_locale, R.string.settings_default_lang);if (oldLangs.contains(lang))setLocale(newLangs.get(oldLangs.indexOf(lang)));remove(R.string.settings_key_locale);}if (settings.contains(getResString(R.string.settings_key_tap_to_reveal))) {if (getBoolean(R.string.settings_key_tap_to_reveal, false)) {setString(R.string.settings_key_tap_single, Constants.TapMode.REVEAL.toString().toLowerCase(Locale.ENGLISH));}remove(R.string.settings_key_tap_to_reveal);}if (settings.contains(getResString(R.string.settings_key_backup_password))) {String plainPassword = getBackupPassword();try {KeyPair key = KeyStoreHelper.loadOrGenerateAsymmetricKeyPair(context, Constants.KEYSTORE_ALIAS_PASSWORD);byte[] encPassword = EncryptionHelper.encrypt(key.getPublic(), plainPassword.getBytes(StandardCharsets.UTF_8));setString(R.string.settings_key_backup_password_enc, Base64.encodeToString(encPassword, Base64.URL_SAFE));remove(R.string.settings_key_backup_password);} catch (Exception e) {e.printStackTrace();}}}private String getResString(int resId) {return context.getString(resId);}private int getResInt(int resId) {return context.getResources().getInteger(resId);}private String getString(int keyId, int defaultId) {return settings.getString(getResString(keyId), getResString(defaultId));}private String getString(int keyId, String defaultValue) {return settings.getString(getResString(keyId), defaultValue);}private boolean getBoolean(int keyId, boolean defaultValue) {return settings.getBoolean(getResString(keyId), defaultValue);}private int getInt(int keyId, int defaultId) {return settings.getInt(getResString(keyId), getResInt(defaultId));}private int getIntValue(int keyId, int defaultValue) {return settings.getInt(getResString(keyId), defaultValue);}private long getLong(int keyId, long defaultValue) {return settings.getLong(getResString(keyId), defaultValue);}private Set<String> getStringSet(int keyId, Set<String> defaultValue) {return new HashSet<String>(settings.getStringSet(getResString(keyId), defaultValue));}private void setBoolean(int keyId, boolean value) {settings.edit().putBoolean(getResString(keyId), value).apply();}private void setInt(int keyId, int value) {settings.edit().putInt(getResString(keyId), value).apply();}private void setString(int keyId, String value) {settings.edit().putString(getResString(keyId), value).apply();}private void setStringSet(int keyId, Set<String> value) {settings.edit().putStringSet(getResString(keyId), value).apply();}private void remove(int keyId) {settings.edit().remove(getResString(keyId)).apply();}public void clear(boolean keep_auth) {AuthMethod authMethod = getAuthMethod();String authCredentials = getAuthCredentials();byte[] authSalt = getSalt();int authIterations = getIterations();boolean warningShown = getFirstTimeWarningShown();SharedPreferences.Editor editor = settings.edit();editor.clear();editor.putBoolean(getResString(R.string.settings_key_security_backup_warning), warningShown);if (keep_auth) {editor.putString(getResString(R.string.settings_key_auth), authMethod.toString().toLowerCase());if (! authCredentials.isEmpty()) {editor.putString(getResString(R.string.settings_key_auth_credentials), authCredentials);editor.putInt(getResString(R.string.settings_key_auth_iterations), authIterations);String encodedSalt = Base64.encodeToString(authSalt, Base64.URL_SAFE);editor.putString(getResString(R.string.settings_key_auth_salt), encodedSalt);}}editor.commit();PreferenceManager.setDefaultValues(context, R.xml.preferences, true);}public void registerPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener) {settings.registerOnSharedPreferenceChangeListener(listener);}public void unregisterPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener) {settings.unregisterOnSharedPreferenceChangeListener(listener);}public boolean getTapToReveal() {return getTapSingle() == Constants.TapMode.REVEAL || getTapDouble() == Constants.TapMode.REVEAL;}public int getTapToRevealTimeout() {return getInt(R.string.settings_key_tap_to_reveal_timeout, R.integer.settings_default_tap_to_reveal_timeout);}public AuthMethod getAuthMethod() {String authString = getString(R.string.settings_key_auth, CredentialsPreference.DEFAULT_VALUE.name().toLowerCase(Locale.ENGLISH));return AuthMethod.valueOf(authString.toUpperCase(Locale.ENGLISH));}public void setAuthMethod(AuthMethod authMethod) {setString(R.string.settings_key_auth, authMethod.name().toLowerCase(Locale.ENGLISH));}public void removeAuthPasswordHash() {remove(R.string.settings_key_auth_password_hash);}public void removeAuthPINHash() {remove(R.string.settings_key_auth_pin_hash);}public String getOldCredentials(AuthMethod method) {if (method == AuthMethod.PASSWORD)return getString(R.string.settings_key_auth_password_hash, """");else if (method == AuthMethod.PIN)return getString(R.string.settings_key_auth_pin_hash, """");elsereturn """";}public String getAuthCredentials() {return getString(R.string.settings_key_auth_credentials, """");}public byte[] setAuthCredentials(String plainPassword) {byte[] key = null;try {int iterations = EncryptionHelper.generateRandomIterations();EncryptionHelper.PBKDF2Credentials credentials = EncryptionHelper.generatePBKDF2Credentials(plainPassword, getSalt(), iterations);String password = Base64.encodeToString(credentials.password, Base64.URL_SAFE);setIterations(iterations);setString(R.string.settings_key_auth_credentials, password);key = credentials.key;} catch (NoSuchAlgorithmException | InvalidKeySpecException e) {e.printStackTrace();}return key;}public void setSalt(byte[] bytes) {String encodedSalt = Base64.encodeToString(bytes, Base64.URL_SAFE);setString(R.string.settings_key_auth_salt, encodedSalt);}public byte[] getSalt() {String storedSalt = getString(R.string.settings_key_auth_salt, """");if (storedSalt.isEmpty()) {byte[] newSalt = EncryptionHelper.generateRandom(Constants.PBKDF2_SALT_LENGTH);setSalt(newSalt);return newSalt;} else {return Base64.decode(storedSalt, Base64.URL_SAFE);}}public int getIterations() {return getIntValue(R.string.settings_key_auth_iterations, Constants.PBKDF2_DEFAULT_ITERATIONS);}public void setIterations(int value) {setInt(R.string.settings_key_auth_iterations, value);}public EncryptionType getEncryption() {String encType = getString(R.string.settings_key_encryption, R.string.settings_default_encryption);return EncryptionType.valueOf(encType.toUpperCase());}public void setEncryption(EncryptionType encryptionType) {setEncryption(encryptionType.name().toLowerCase());}public void setEncryption(String encryption) {setString(R.string.settings_key_encryption, encryption);}public Set<String> getPanicResponse() {return settings.getStringSet(getResString(R.string.settings_key_panic), Collections.<String>emptySet());}public boolean getRelockOnScreenOff() {return getBoolean(R.string.settings_key_relock_screen_off, true);}public boolean getRelockOnBackground() {return getBoolean(R.string.settings_key_relock_background, false);}public boolean getBlockAccessibility() {return getBoolean(R.string.settings_key_block_accessibility, false);}public void setLocale(String locale) {setString(R.string.settings_key_lang, locale);}public Locale getLocale() {String lang = getString(R.string.settings_key_lang, R.string.settings_default_lang);if (lang.equals(""system"")) {return Tools.getSystemLocale();} else {String[] splitLang =  lang.split(""_"");if (splitLang.length > 1) {return new Locale(splitLang[0], splitLang[1]);} else {return new Locale(lang);}}}public int getTheme() {String themeName = getString(R.string.settings_key_theme, R.string.settings_default_theme);int theme = R.style.AppTheme_NoActionBar;if (themeName.equals(""light"")) {theme = R.style.AppTheme_NoActionBar;} else if (themeName.equals(""dark"")) {theme = R.style.AppTheme_Dark_NoActionBar;} else if (themeName.equals(""black"")) {theme = R.style.AppTheme_Black_NoActionBar;}return theme;}public int getLabelSize() {return getInt(R.string.settings_key_label_size, R.integer.settings_default_label_size);}public boolean getScrollLabel() {return getBoolean(R.string.settings_key_label_scroll, false);}public boolean getFirstTimeWarningShown() {return getBoolean(R.string.settings_key_security_backup_warning, false);}public void setFirstTimeWarningShown(boolean value) {setBoolean(R.string.settings_key_security_backup_warning, value);}public boolean getSpecialFeatures() {return getBoolean(R.string.settings_key_special_features, false);}public void setSpecialFeatures(boolean value) {setBoolean(R.string.settings_key_special_features, value);}public SortMode getSortMode() {String modeStr = getString(R.string.settings_key_sort_mode, SortMode.UNSORTED.toString());return SortMode.valueOf(modeStr);}public void setSortMode(SortMode value) {setString(R.string.settings_key_sort_mode, value.toString());}public List<Constants.SearchIncludes> getSearchValues() {Set<String> stringValues = settings.getStringSet(getResString(R.string.settings_key_search_includes), new HashSet<>(Arrays.asList(context.getResources().getStringArray(R.array.settings_defaults_search_includes))));List<Constants.SearchIncludes> values = new ArrayList<>();for (String value : stringValues) {values.add(Constants.SearchIncludes.valueOf(value.toUpperCase(Locale.ENGLISH)));}return values;}public Constants.CardLayouts getCardLayout() {String stringValue = getString(R.string.settings_key_card_layout, R.string.settings_default_card_layout);return Constants.CardLayouts.valueOf(stringValue.toUpperCase(Locale.ENGLISH));}public boolean getBackupAsk() {return getBoolean(R.string.settings_key_backup_ask, true);}public String getBackupPassword() {return getString(R.string.settings_key_backup_password, """");}public String getBackupPasswordEnc() {String base64Password = getString(R.string.settings_key_backup_password_enc, """");byte[] encPassword = Base64.decode(base64Password, Base64.URL_SAFE);String password = """";try {KeyPair key = KeyStoreHelper.loadOrGenerateAsymmetricKeyPair(context, Constants.KEYSTORE_ALIAS_PASSWORD);password = new String(EncryptionHelper.decrypt(key.getPrivate(), encPassword), StandardCharsets.UTF_8);} catch (Exception e) {e.printStackTrace();}return password;}public Set<String> getBackupBroadcasts() {return settings.getStringSet(getResString(R.string.settings_key_backup_broadcasts), Collections.<String>emptySet());}public boolean isPlainTextBackupBroadcastEnabled() {return getBackupBroadcasts().contains(""plain"");}public boolean isEncryptedBackupBroadcastEnabled() {return getBackupBroadcasts().contains(""encrypted"");}public String getOpenPGPProvider() {return getString(R.string.settings_key_openpgp_provider, """");}public String getOpenPGPEncryptionUserIDs() {return getString(R.string.settings_key_openpgp_key_encrypt, """");}public long getOpenPGPSigningKey() {return getLong(R.string.settings_key_openpgp_key_sign, 0);}public boolean getOpenPGPVerify() {return getBoolean(R.string.settings_key_openpgp_verify, false);}public boolean getAllTagsToggle() {return getBoolean(R.string.settings_key_all_tags_toggle, true);}public void setAllTagsToggle(Boolean value) {setBoolean(R.string.settings_key_all_tags_toggle, value);}public boolean getNoTagsToggle() {return getBoolean(R.string.settings_key_no_tags_toggle, true);}public void setNoTagsToggle(Boolean value) {setBoolean(R.string.settings_key_no_tags_toggle, value);}public boolean getTagToggle(String tag) {//The tag toggle holds tags that are unchecked in order to default to checked.Set<String> toggledTags = getStringSet(R.string.settings_key_tags_toggles, new HashSet<String>());return !toggledTags.contains(tag);}public void setTagToggle(String tag, Boolean value) {Set<String> toggledTags = getStringSet(R.string.settings_key_tags_toggles, new HashSet<String>());if(value)toggledTags.remove(tag);elsetoggledTags.add(tag);setStringSet(R.string.settings_key_tags_toggles, toggledTags);}public boolean getThumbnailVisible() {return getThumbnailSize() > 0;}public int getThumbnailSize() {try {String dimen = getString(R.string.settings_key_thumbnail_size, context.getResources().getString(R.string.settings_default_thumbnail_size));return DimensionConverter.stringToDimensionPixelSize(dimen, context.getResources().getDisplayMetrics());} catch(Exception e) {e.printStackTrace();return context.getResources().getDimensionPixelSize(R.dimen.card_thumbnail_size);}}public int getTokenSplitGroupSize() {// the setting is of type ""String"", because ListPreference does not support integer arrays for its entryValuesreturn  Integer.valueOf(getString(R.string.settings_key_split_group_size, R.string.settings_default_split_group_size));}public Constants.TagFunctionality getTagFunctionality() {String tagFunctionality = getString(R.string.settings_key_tag_functionality, R.string.settings_default_tag_functionality);return Constants.TagFunctionality.valueOf(tagFunctionality.toUpperCase());}public boolean getScreenshotsEnabled() {return getBoolean(R.string.settings_key_enable_screenshot, false);}public boolean getUsedTokensDialogShown() {return getBoolean(R.string.settings_key_last_used_dialog_shown, false);}public void setUsedTokensDialogShown(boolean value) {setBoolean(R.string.settings_key_last_used_dialog_shown, value);}public boolean getAndroidBackupServiceEnabled() {return getBoolean(R.string.settings_key_enable_android_backup_service, true);}public void setAndroidBackupServiceEnabled(boolean value) {setBoolean(R.string.settings_key_enable_android_backup_service, value);}public boolean getIsAppendingDateTimeToBackups() {return getBoolean(R.string.settings_key_backup_append_date_time, true);}public int getAuthInactivityDelay() {return getIntValue(R.string.settings_key_auth_inactivity_delay, 0);}public boolean getAuthInactivity() {return getBoolean(R.string.settings_key_auth_inactivity, false);}public boolean isMinimizeAppOnCopyEnabled() {return  getBoolean(R.string.settings_key_minimize_on_copy, false);}private Constants.AutoBackup getAutoBackupEncryptedSetting() {String stringValue = getString(R.string.settings_key_auto_backup_password_enc, R.string.settings_default_auto_backup_password_enc);return Constants.AutoBackup.valueOf(stringValue.toUpperCase(Locale.ENGLISH));}public boolean getAutoBackupEncryptedPasswordsEnabled() {return getAutoBackupEncryptedSetting() != Constants.AutoBackup.OFF;}public boolean getAutoBackupEncryptedFullEnabled() {return getAutoBackupEncryptedSetting() == Constants.AutoBackup.ALL_EDITS;}public boolean isHighlightTokenOptionEnabled() {return getBoolean(R.string.settings_key_label_highlight_token,true);}public boolean isHideGlobalTimeoutEnabled() {return getBoolean(R.string.settings_key_hide_global_timeout, false);}public boolean isShowIndividualTimeoutsEnabled() {return getBoolean(R.string.settings_key_show_individual_timeouts, false);}public Constants.TapMode getTapSingle() {String singleTap = getString(R.string.settings_key_tap_single, R.string.settings_default_tap_single);return Constants.TapMode.valueOf(singleTap.toUpperCase(Locale.ENGLISH));}public Constants.TapMode getTapDouble() {String doubleTap = getString(R.string.settings_key_tap_double, R.string.settings_default_tap_double);return Constants.TapMode.valueOf(doubleTap.toUpperCase(Locale.ENGLISH));}public void setBackupLocation(Uri uri) {setString(R.string.settings_key_backup_location, uri.toString());}public Uri getBackupLocation() {return Uri.parse(getString(R.string.settings_key_backup_location, """"));}public boolean isBackupLocationSet() {return !getString(R.string.settings_key_backup_location, """").isEmpty();}public boolean getBlockAutofill() {return getBoolean(R.string.settings_key_block_autofill, false);}}",andOTP/app/src/main/java/org/shadowice/flocke/andotp/Utilities/Settings.java
128,"<?xml version=""1.0"" encoding=""utf-8""?><resources><!-- Keys --><string name=""settings_key_cat_security"" translatable=""false"">pref_cat_security</string><string name=""settings_key_tap_to_reveal"" translatable=""false"">pref_tap_to_reveal</string>  <!-- Deprecated --><string name=""settings_key_tap_to_reveal_timeout"" translatable=""false"">pref_tap_to_reveal_timeout</string><string name=""settings_key_auth"" translatable=""false"">pref_auth</string><string name=""settings_key_auth_password"" translatable=""false"">pref_auth_password</string>    <!-- Deprecated --><string name=""settings_key_auth_password_hash"" translatable=""false"">pref_auth_password_hash</string>    <!-- Deprecated --><string name=""settings_key_auth_pin"" translatable=""false"">pref_auth_pin</string>    <!-- Deprecated --><string name=""settings_key_auth_pin_hash"" translatable=""false"">pref_auth_pin_hash</string>    <!-- Deprecated --><string name=""settings_key_auth_credentials"" translatable=""false"">pref_auth_credentials</string><string name=""settings_key_auth_iterations"" translatable=""false"">pref_auth_iterations</string><string name=""settings_key_auth_salt"" translatable=""false"">pref_auth_salt</string><string name=""settings_key_encryption"" translatable=""false"">pref_encryption</string><string name=""settings_key_panic"" translatable=""false"">pref_panic</string><string name=""settings_key_relock_screen_off"" translatable=""false"">pref_relock_screen_off</string><string name=""settings_key_relock_background"" translatable=""false"">pref_relock_background</string><string name=""settings_key_auth_inactivity"" translatable=""false"">pref_auth_inactivity</string><string name=""settings_key_auth_inactivity_delay"" translatable=""false"">pref_auth_inactivity_timeout</string><string name=""settings_key_block_accessibility"" translatable=""false"">pref_block_accessibility</string><string name=""settings_key_block_autofill"" translatable=""false"">pref_block_autofill</string><string name=""settings_key_lang"" translatable=""false"">pref_lang</string><string name=""settings_key_locale"" translatable=""false"">pref_locale</string>                        <!-- Deprecated --><string name=""settings_key_theme"" translatable=""false"">pref_theme</string><string name=""settings_key_label_size"" translatable=""false"">pref_label_size_sp</string><string name=""settings_key_card_layout"" translatable=""false"">pref_card_layout</string><string name=""settings_key_label_scroll"" translatable=""false"">pref_label_scroll</string><string name=""settings_key_tap_single"" translatable=""false"">pref_tap_single</string><string name=""settings_key_tap_double"" translatable=""false"">pref_tap_double</string><string name=""settings_key_minimize_on_copy"" translatable=""false"">pref_minimize_on_copy</string><string name=""settings_key_thumbnail_size"" translatable=""false"">pref_thumbnail_size</string><string name=""settings_key_split_group_size"" translatable=""false"">pref_split_group_size</string><string name=""settings_key_tag_functionality"" translatable=""false"">pref_tag_functionality</string><string name=""settings_key_search_includes"" translatable=""false"">pref_search_includes</string><string name=""settings_key_label_highlight_token"" translatable=""false"">pref_label_highlight_token</string><string name=""settings_key_hide_global_timeout"" translatable=""false"">pref_hide_global_timeout</string><string name=""settings_key_show_individual_timeouts"" translatable=""false"">pref_show_individual_timeouts</string><string name=""settings_key_backup_append_date_time"" translatable=""false"">pref_backup_append_date_time</string><string name=""settings_key_backup_ask"" translatable=""false"">pref_backup_ask</string><string name=""settings_key_backup_location"" translatable=""false"">pref_backup_location</string><string name=""settings_key_backup_directory"" translatable=""false"">pref_backup_directory</string>    <!-- Deprecated --><string name=""settings_key_backup_password"" translatable=""false"">pref_backup_password</string>      <!-- Deprecated --><string name=""settings_key_backup_password_enc"" translatable=""false"">pref_backup_password_enc</string><string name=""settings_key_auto_backup_password_enc"" translatable=""false"">pref_backup_auto_password_enc</string><string name=""settings_key_backup_broadcasts"" translatable=""false"">pref_backup_broadcasts</string><string name=""settings_key_openpgp_provider"" translatable=""false"">pref_openpgp_provider</string><string name=""settings_key_openpgp_key_encrypt"" translatable=""false"">pref_openpgp_key_encrypt</string><string name=""settings_key_openpgp_key_sign"" translatable=""false"">pref_openpgp_key_sign</string><string name=""settings_key_openpgp_verify"" translatable=""false"">pref_openpgp_verify</string><string name=""settings_key_new_backup_format_dialog_shown"" translatable=""false"">pref_new_backup_dialog_shown</string>   <!--Deprecated --><string name=""settings_key_security_backup_warning"" translatable=""false"">pref_security_backup_warning_shown</string><string name=""settings_key_sort_mode"" translatable=""false"">pref_sort_mode</string><string name=""settings_key_special_features"" translatable=""false"">pref_special_features</string><string name=""settings_key_all_tags_toggle"" translatable=""false"">pref_all_tags_toggle</string><string name=""settings_key_no_tags_toggle"" translatable=""false"">pref_no_tags_toggle</string><string name=""settings_key_tags_toggles"" translatable=""false"">pref_tags_toggles</string><string name=""settings_key_enable_screenshot"" translatable=""false"">pref_enable_screenshot</string><string name=""settings_key_enable_android_backup_service"" translatable=""false"">pref_enable_android_backup_service</string><string name=""settings_key_clear_keystore"" translatable=""false"">pref_clear_keystore</string><string name=""settings_key_last_used_dialog_shown"" translatable=""false"">pref_last_used_dialog_shown</string><string name=""settings_key_android21_deprecation_notice_shown"" translatable=""false"">pref_android21_deprecation_notice_shown</string>    <!-- Deprecated --><!-- Default values --><integer name=""settings_default_tap_to_reveal_timeout"">30</integer><integer name=""settings_default_auth_inactivity_delay"">30</integer><string name=""settings_default_encryption"" translatable=""false"">keystore</string><string name=""settings_default_lang"" translatable=""false"">system</string><string name=""settings_default_theme"" translatable=""false"">light</string><integer name=""settings_default_label_size"">18</integer><string name=""settings_default_card_layout"" translatable=""false"">default</string><string name=""settings_default_tap_single"" translatable=""false"">nothing</string><string name=""settings_default_tap_double"" translatable=""false"">nothing</string><string name=""settings_default_thumbnail_size"" translatable=""false"">46dp</string><string name=""settings_default_split_group_size"" translatable=""false"">3</string><string name=""settings_default_tag_functionality"" translatable=""false"">or</string><string name=""settings_default_auto_backup_password_enc"" translatable=""false"">off</string><string-array name=""settings_defaults_search_includes""><item>label</item><item>issuer</item></string-array><!-- All of the possible tile background colors --><array name=""letter_tile_colors""><item>#f16364</item><item>#f58559</item><item>#f9a43e</item><item>#e4c62e</item><item>#67bf74</item><item>#59a2be</item><item>#2093cd</item><item>#ad62a7</item></array><!-- List values --><string-array name=""settings_values_encryption"" translatable=""false""><item>keystore</item><item>password</item></string-array><string-array name=""settings_values_panic"" translatable=""false""><item>accounts</item><item>settings</item></string-array><string-array name=""settings_values_card_layout"" translatable=""false""><item>compact</item><item>default</item><item>full</item></string-array><string-array name=""settings_values_tap"" translatable=""false""><item>nothing</item><item>reveal</item><item>copy</item><item>copy_background</item></string-array><string-array name=""settings_values_search_includes"" translatable=""false""><item>label</item><item>issuer</item><item>tags</item></string-array><string-array name=""settings_values_auto_backup_password_enc"" translatable=""false""><item>off</item><item>new_entries</item><item>all_edits</item></string-array><string-array name=""settings_values_lang"" translatable=""false""><item>system</item><item>ca</item><item>de</item><item>en</item><item>es</item><item>fr</item><item>gl</item><item>it</item><item>hu</item><item>nl</item><item>pl</item><item>pt_BR</item><item>sl</item><item>sv</item><item>tr</item><item>cs</item><item>el</item><item>ru</item><item>uk</item><item>bg</item><item>ar</item><item>fa</item><item>hi</item><item>ja</item><item>zh_CN</item><item>zh_TW</item></string-array><string-array name=""settings_values_theme"" translatable=""false""><item>light</item><item>dark</item><item>black</item></string-array><string-array name=""settings_values_thumbnail_size"" translatable=""false""><item>0dp</item><item>24dp</item><item>32dp</item><item>46dp</item><item>64dp</item><item>96dp</item></string-array><string-array name=""settings_values_split_group_size"" translatable=""false""><item>0</item><item>2</item><item>3</item></string-array><string-array name=""settings_values_tag_functionality"" translatable=""false""><item>or</item><item>and</item><item>single</item></string-array><string-array name=""settings_values_backup_broadcasts"" translatable=""false""><item>plain</item><item>encrypted</item></string-array><string-array name=""settings_entries_lang"" translatable=""false""><item>@string/settings_lang_sys_default</item><item>Català</item><item>Deutsch</item><item>English</item><item>Español</item><item>Français</item><item>Galego</item><item>Italiano</item><item>Magyar</item><item>Nederlands</item><item>Polski</item><item>Português (Brasil)</item><item>Slovenščina</item><item>Svenska</item><item>Türkçe</item><item>Čeština</item><item>Ελληνικά</item><item>Русский</item><item>Українська</item><item>български</item><item>العربية</item><item>فارسی</item><item>हिन्दी</item><item>日本語</item><item>简体中文</item><item>繁體中文</item></string-array><!-- Misc --><string-array name=""settings_empty_array"" translatable=""false""></string-array><!-- Constraints --><integer name=""settings_min_tap_to_reveal_timeout"">5</integer><integer name=""settings_max_tap_to_reveal_timeout"">60</integer><integer name=""settings_min_label_size"">12</integer><integer name=""settings_max_label_size"">24</integer><integer name=""settings_auth_min_inactivity_delay"">10</integer><integer name=""settings_auth_max_inactivity_delay"">360</integer></resources>",andOTP/app/src/main/res/values/settings.xml
128,"<?xml version=""1.0"" encoding=""utf-8""?><PreferenceScreenxmlns:android=""http://schemas.android.com/apk/res/android""xmlns:app=""http://schemas.android.com/apk/res-auto""><PreferenceCategoryandroid:key=""@string/settings_key_cat_security""android:title=""@string/settings_category_title_security""><com.vanniktech.vntnumberpickerpreference.VNTNumberPickerPreferenceandroid:key=""@string/settings_key_tap_to_reveal_timeout""android:title=""@string/settings_title_tap_to_reveal_timeout""android:dialogMessage=""@string/settings_desc_tap_to_reveal_timeout""android:defaultValue=""@integer/settings_default_tap_to_reveal_timeout""app:vnt_minValue=""@integer/settings_min_tap_to_reveal_timeout""app:vnt_maxValue=""@integer/settings_max_tap_to_reveal_timeout"" /><org.shadowice.flocke.andotp.Preferences.CredentialsPreferenceandroid:key=""@string/settings_key_auth""android:title=""@string/settings_title_auth"" /><ListPreferenceandroid:key=""@string/settings_key_encryption""android:title=""@string/settings_title_encryption""android:summary=""%s""android:entries=""@array/settings_entries_encryption""android:entryValues=""@array/settings_values_encryption""android:defaultValue=""@string/settings_default_encryption"" /><MultiSelectListPreferenceandroid:key=""@string/settings_key_panic""android:title=""@string/settings_title_panic""android:summary=""@string/settings_desc_panic""android:entries=""@array/settings_entries_panic""android:entryValues=""@array/settings_values_panic""android:defaultValue=""@array/settings_empty_array"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_relock_screen_off""android:title=""@string/settings_title_relock_screen_off""android:summary=""@string/settings_desc_relock_screen_off""android:defaultValue=""true"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_relock_background""android:title=""@string/settings_title_relock_background""android:summary=""@string/settings_desc_relock_background""android:defaultValue=""false"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_auth_inactivity""android:title=""@string/settings_title_auth_inactivity""android:summary=""@string/settings_desc_auth_inactivity""android:defaultValue=""false"" /><com.vanniktech.vntnumberpickerpreference.VNTNumberPickerPreferenceandroid:key=""@string/settings_key_auth_inactivity_delay""android:title=""@string/settings_title_auth_inactivity_delay""android:dialogMessage=""@string/settings_desc_auth_inactivity_delay""android:defaultValue=""@integer/settings_default_auth_inactivity_delay""android:dependency=""@string/settings_key_auth_inactivity""app:vnt_minValue=""@integer/settings_auth_min_inactivity_delay""app:vnt_maxValue=""@integer/settings_auth_max_inactivity_delay"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_block_accessibility""android:title=""@string/settings_title_block_accessibility""android:summary=""@string/settings_desc_block_accessibility""android:defaultValue=""false"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_block_autofill""android:title=""@string/settings_title_block_autofill""android:summary=""@string/settings_desc_block_autofill""android:defaultValue=""false"" /></PreferenceCategory><PreferenceCategoryandroid:title=""@string/settings_category_title_ui""><ListPreferenceandroid:key=""@string/settings_key_lang""android:title=""@string/settings_title_lang""android:summary=""%s""android:entries=""@array/settings_entries_lang""android:entryValues=""@array/settings_values_lang""android:defaultValue=""@string/settings_default_lang"" /><ListPreferenceandroid:key=""@string/settings_key_theme""android:title=""@string/settings_title_theme""android:summary=""%s""android:entries=""@array/settings_entries_theme""android:entryValues=""@array/settings_values_theme""android:defaultValue=""@string/settings_default_theme"" /><ListPreferenceandroid:key=""@string/settings_key_card_layout""android:title=""@string/settings_title_card_layout""android:summary=""%s""android:entries=""@array/settings_entries_card_layout""android:entryValues=""@array/settings_values_card_layout""android:defaultValue=""@string/settings_default_card_layout"" /><ListPreferenceandroid:key=""@string/settings_key_tap_single""android:title=""@string/settings_title_tap_single""android:summary=""%s""android:entries=""@array/settings_entries_tap""android:entryValues=""@array/settings_values_tap""android:defaultValue=""@string/settings_default_tap_single"" /><ListPreferenceandroid:key=""@string/settings_key_tap_double""android:title=""@string/settings_title_tap_double""android:summary=""%s""android:entries=""@array/settings_entries_tap""android:entryValues=""@array/settings_values_tap""android:defaultValue=""@string/settings_default_tap_double"" /><com.vanniktech.vntnumberpickerpreference.VNTNumberPickerPreferenceandroid:key=""@string/settings_key_label_size""android:title=""@string/settings_title_label_size""android:defaultValue=""@integer/settings_default_label_size""app:vnt_maxValue=""@integer/settings_max_label_size""app:vnt_minValue=""@integer/settings_min_label_size"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_label_scroll""android:title=""@string/settings_title_label_scroll""android:summary=""@string/settings_desc_label_scroll""android:defaultValue=""false"" /><ListPreferenceandroid:key=""@string/settings_key_thumbnail_size""android:title=""@string/settings_title_thumbnail_size_ask""android:summary=""%s""android:entries=""@array/settings_entries_thumbnail_size""android:entryValues=""@array/settings_values_thumbnail_size""android:defaultValue=""@string/settings_default_thumbnail_size"" /><ListPreferenceandroid:key=""@string/settings_key_split_group_size""android:title=""@string/settings_title_split_group_size""android:summary=""%s""android:entries=""@array/settings_entries_split_group_size""android:entryValues=""@array/settings_values_split_group_size""android:defaultValue=""@string/settings_default_split_group_size"" /><ListPreferenceandroid:key=""@string/settings_key_tag_functionality""android:title=""@string/settings_title_tag_functionality""android:summary=""%s""android:entries=""@array/settings_entries_tag_functionality""android:entryValues=""@array/settings_values_tag_functionality""android:defaultValue=""@string/settings_default_tag_functionality"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_minimize_on_copy""android:title=""@string/settings_title_minimize_on_copy""android:summary=""@string/settings_desc_minimize_on_copy""android:defaultValue=""false"" /><MultiSelectListPreferenceandroid:key=""@string/settings_key_search_includes""android:title=""@string/settings_title_search_includes""android:summary=""@string/settings_desc_search_includes""android:entries=""@array/settings_entries_search_includes""android:entryValues=""@array/settings_values_search_includes""android:defaultValue=""@array/settings_defaults_search_includes"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_label_highlight_token""android:title=""@string/settings_title_label_highlight_token""android:summary=""@string/settings_desc_label_highlight_token""android:defaultValue=""true"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_hide_global_timeout""android:title=""@string/settings_title_hide_global_timeout""android:summary=""@string/settings_desc_hide_global_timeout""android:defaultValue=""false"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_show_individual_timeouts""android:title=""@string/settings_title_show_individual_timeouts""android:summary=""@string/settings_desc_show_individual_timeouts""android:defaultValue=""false"" /></PreferenceCategory><PreferenceCategoryandroid:title=""@string/settings_category_title_backup""><CheckBoxPreferenceandroid:key=""@string/settings_key_enable_android_backup_service""android:title=""@string/settings_title_enable_android_backup_service""android:summary=""@string/settings_desc_enable_android_backup_service""android:defaultValue=""true"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_backup_append_date_time""android:title=""@string/settings_title_backup_append_date""android:summary=""@string/settings_desc_backup_append_date""android:defaultValue=""true"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_backup_ask""android:title=""@string/settings_title_backup_ask""android:summary=""@string/settings_desc_backup_ask""android:disableDependentsState=""true""android:defaultValue=""true"" /><Preferenceandroid:key=""@string/settings_key_backup_location""android:title=""@string/settings_title_backup_location""android:summary=""@string/settings_desc_backup_location"" /><org.shadowice.flocke.andotp.Preferences.PasswordEncryptedPreferenceandroid:key=""@string/settings_key_backup_password_enc""android:title=""@string/settings_title_backup_password""android:summary=""@string/settings_desc_backup_password"" /><ListPreferenceandroid:key=""@string/settings_key_auto_backup_password_enc""android:title=""@string/settings_title_auto_backup_password_enc""android:summary=""@string/settings_desc_auto_backup_password_enc""android:entries=""@array/settings_entries_auto_backup_password_enc""android:entryValues=""@array/settings_values_auto_backup_password_enc""android:defaultValue=""@string/settings_default_auto_backup_password_enc"" /><MultiSelectListPreferenceandroid:key=""@string/settings_key_backup_broadcasts""android:title=""@string/settings_title_backup_broadcasts""android:summary=""@string/settings_desc_backup_broadcasts""android:entries=""@array/settings_entries_backup_broadcasts""android:entryValues=""@array/settings_values_backup_broadcasts""android:defaultValue=""@array/settings_empty_array"" /><org.openintents.openpgp.util.OpenPgpAppPreferenceandroid:key=""@string/settings_key_openpgp_provider""android:title=""@string/settings_title_openpgp_provider"" /><EditTextPreferenceandroid:key=""@string/settings_key_openpgp_key_encrypt""android:title=""@string/settings_title_openpgp_key_encrypt""android:summary=""@string/settings_desc_openpgp_key_encrypt""android:enabled=""false"" /><org.openintents.openpgp.util.OpenPgpKeyPreferenceandroid:key=""@string/settings_key_openpgp_key_sign""android:title=""@string/settings_title_openpgp_key_sign"" /><CheckBoxPreferenceandroid:key=""@string/settings_key_openpgp_verify""android:title=""@string/settings_title_openpgp_verify""android:summary=""@string/settings_desc_openpgp_verify""android:defaultValue=""false"" /></PreferenceCategory></PreferenceScreen>",andOTP/app/src/main/res/xml/preferences.xml
2,"package io.github.zwieback.familyfinance.business.chart.fragment;import android.graphics.RectF;import android.os.Bundle;import android.support.annotation.ColorRes;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.annotation.StringRes;import android.support.v4.content.ContextCompat;import android.view.View;import com.annimon.stream.Collectors;import com.annimon.stream.Stream;import com.github.mikephil.charting.charts.HorizontalBarChart;import com.github.mikephil.charting.components.Legend;import com.github.mikephil.charting.components.XAxis;import com.github.mikephil.charting.components.YAxis;import com.github.mikephil.charting.data.BarData;import com.github.mikephil.charting.data.BarDataSet;import com.github.mikephil.charting.data.BarEntry;import com.github.mikephil.charting.data.Entry;import com.github.mikephil.charting.formatter.IAxisValueFormatter;import com.github.mikephil.charting.formatter.IValueFormatter;import com.github.mikephil.charting.formatter.IndexAxisValueFormatter;import com.github.mikephil.charting.formatter.LargeValueFormatter;import com.github.mikephil.charting.formatter.PercentFormatter;import com.github.mikephil.charting.highlight.Highlight;import com.github.mikephil.charting.listener.OnChartValueSelectedListener;import com.github.mikephil.charting.utils.MPPointF;import java.util.List;import java.util.Map;import java.util.Set;import io.github.zwieback.familyfinance.R;import io.github.zwieback.familyfinance.business.chart.display.BarChartDisplay;import io.github.zwieback.familyfinance.business.chart.display.HorizontalBarChartDisplay;import io.github.zwieback.familyfinance.business.chart.exception.UnsupportedHorizontalBarChartGroupByTypeException;import io.github.zwieback.familyfinance.business.chart.marker.HorizontalBarChartMarkerView;import io.github.zwieback.familyfinance.business.chart.service.builder.IdIndexMapStatefulBuilder;import io.github.zwieback.familyfinance.business.chart.service.converter.OperationConverter;import io.github.zwieback.familyfinance.business.chart.service.converter.bar.OperationHorizontalBarConverter;import io.github.zwieback.familyfinance.business.chart.service.converter.bar.OperationHorizontalBarPercentConverter;import io.github.zwieback.familyfinance.business.chart.service.formatter.LocalizedValueFormatter;import io.github.zwieback.familyfinance.business.chart.service.grouper.OperationGrouper;import io.github.zwieback.familyfinance.business.chart.service.grouper.pie.OperationGrouperByArticle;import io.github.zwieback.familyfinance.business.chart.service.grouper.pie.OperationGrouperByArticleParent;import io.github.zwieback.familyfinance.business.operation.filter.OperationFilter;import io.github.zwieback.familyfinance.core.model.Article;import io.github.zwieback.familyfinance.core.model.OperationView;public abstract class HorizontalBarChartFragment<F extends OperationFilter>extends ChartFragment<HorizontalBarChart, BarEntry, F, HorizontalBarChartDisplay>implements OnChartValueSelectedListener {private static final float NORMAL_GRANULARITY = 1f;private static final int Y_AXIS_ANIMATION_DURATION = 500;private int maxBarCountOnScreen;private float barValueTextSize;private RectF onValueSelectedRectF;private IdIndexMapStatefulBuilder idIndexMapStatefulBuilder;@Overridepublic void onCreate(@Nullable Bundle savedInstanceState) {super.onCreate(savedInstanceState);maxBarCountOnScreen =getResources().getInteger(R.integer.max_horizontal_bar_count_on_screen);barValueTextSize = getResources().getDimension(R.dimen.bar_value_text_size);onValueSelectedRectF = new RectF();}@Overridepublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {super.onViewCreated(view, savedInstanceState);refreshData();}@Overrideprotected int getFragmentChartLayout() {return R.layout.fragment_chart_bar_horizontal;}@Overrideprotected int getChartId() {return R.id.horizontal_bar_chart;}@Overrideprotected String getDisplayName() {return BarChartDisplay.BAR_CHART_DISPLAY;}@Overrideprotected HorizontalBarChartDisplay createDefaultDisplay() {return new HorizontalBarChartDisplay();}@Overrideprotected void setupChart() {chart.setOnChartValueSelectedListener(this);chart.setDrawValueAboveBar(true);chart.getDescription().setEnabled(false);int yAxisMinimum = getResources().getInteger(R.integer.y_axis_minimum);XAxis leftAxis = chart.getXAxis();leftAxis.setPosition(XAxis.XAxisPosition.BOTTOM);leftAxis.setDrawGridLines(false);leftAxis.setGranularity(NORMAL_GRANULARITY);leftAxis.setLabelCount(maxBarCountOnScreen);YAxis topAxis = chart.getAxisLeft();topAxis.setDrawGridLines(true);topAxis.setAxisMinimum(yAxisMinimum);YAxis bottomAxis = chart.getAxisRight();bottomAxis.setDrawGridLines(false);bottomAxis.setAxisMinimum(yAxisMinimum);disableLegend();}private void disableLegend() {Legend legend = chart.getLegend();legend.setEnabled(false);}private void setupXAxisValueFormatter(@NonNull IAxisValueFormatter xAxisFormatter) {XAxis xAxis = chart.getXAxis();xAxis.setValueFormatter(xAxisFormatter);}private void setupMarker(@NonNull IAxisValueFormatter xAxisFormatter,@NonNull IAxisValueFormatter yAxisFormatter) {HorizontalBarChartMarkerView mv = new HorizontalBarChartMarkerView(extractContext(),xAxisFormatter, yAxisFormatter);mv.setChartView(chart);chart.setMarker(mv);}@Overrideprotected void showData(Map<Float, List<OperationView>> groupedOperations) {if (groupedOperations.isEmpty()) {clearData(R.string.chart_no_data);return;}List<BarEntry> barEntries = convertOperations(groupedOperations);Map<Float, Float> idIndexMap = idIndexMapStatefulBuilder.build();String[] articleNames = convertToArticleNames(idIndexMap);IAxisValueFormatter xAxisFormatter = determineXAxisFormatter(articleNames);setupXAxisValueFormatter(xAxisFormatter);setupMarker(xAxisFormatter, determineYAxisFormatter());BarDataSet expenseSet = buildBarDataSet(barEntries, getDataSetLabel(), getDataSetColor(),display.isViewValues());BarData data = new BarData(expenseSet);data.setValueTextSize(barValueTextSize);data.setValueFormatter(determineDataSetValueFormatter());chart.setData(data);chart.setVisibleXRangeMaximum(maxBarCountOnScreen);fixChartWidth(groupedOperations.size());chart.moveViewTo(0, 0, YAxis.AxisDependency.LEFT);chart.animateY(Y_AXIS_ANIMATION_DURATION);}@StringResprotected abstract int getDataSetLabel();@ColorResprotected abstract int getDataSetColor();private String[] convertToArticleNames(Map<Float, Float> idIndexMap) {Set<Integer> articleIds = Stream.of(idIndexMap.keySet()).map(Float::intValue).collect(Collectors.toSet());List<Article> articles = data.select(Article.class, Article.ID, Article.NAME).where(Article.ID.in(articleIds)).get().toList();String[] articleNames = new String[articles.size()];Stream.of(articles).forEach(article -> {float articleId = article.getId();int barIndex = idIndexMap.get(articleId).intValue();articleNames[barIndex] = article.getName();});return articleNames;}private BarDataSet buildBarDataSet(List<BarEntry> barEntries,@StringRes int dataSetLabel,@ColorRes int dataSetColor,boolean drawValuesEnabled) {BarDataSet dataSet = new BarDataSet(barEntries, getString(dataSetLabel));dataSet.setDrawIcons(false);dataSet.setColors(ContextCompat.getColor(extractContext(), dataSetColor));dataSet.setDrawValues(drawValuesEnabled);return dataSet;}private void fixChartWidth(int numberOfEntries) {if (numberOfEntries < maxBarCountOnScreen) {chart.fitScreen();} else {scaleToAcceptableSize(numberOfEntries);}}private void scaleToAcceptableSize(int numberOfEntries) {chart.getViewPortHandler().setMaximumScaleX(numberOfEntries / 2);}private void updateDrawValues() {chart.getData().setDrawValues(display.isViewValues());chart.invalidate();}@Overridepublic void onValueSelected(Entry e, Highlight h) {if (e == null) {return;}RectF bounds = onValueSelectedRectF;chart.getBarBounds((BarEntry) e, bounds);MPPointF position = chart.getPosition(e,chart.getData().getDataSetByIndex(h.getDataSetIndex()).getAxisDependency());MPPointF.recycleInstance(position);}@Overridepublic void onNothingSelected() {// do nothing}@Overridepublic void onApplyDisplay(HorizontalBarChartDisplay display) {if (this.display.needRefreshData(display)) {this.display = display;operationGrouper = determineOperationGrouper();operationConverter = determineOperationConverter();refreshData();} else {this.display = display;updateDrawValues();}}@Overrideprotected OperationConverter<BarEntry> determineOperationConverter() {idIndexMapStatefulBuilder = IdIndexMapStatefulBuilder.create();if (display.isUsePercentValues()) {return new OperationHorizontalBarPercentConverter(extractContext(),idIndexMapStatefulBuilder);}return new OperationHorizontalBarConverter(extractContext(), idIndexMapStatefulBuilder);}@Overrideprotected OperationGrouper determineOperationGrouper() {switch (display.getGroupByType()) {case ARTICLE:return new OperationGrouperByArticle();case ARTICLE_PARENT:return new OperationGrouperByArticleParent();}throw new UnsupportedHorizontalBarChartGroupByTypeException();}@NonNullprivate IAxisValueFormatter determineXAxisFormatter(String[] articleNames) {return new IndexAxisValueFormatter(articleNames);}@NonNullprivate IAxisValueFormatter determineYAxisFormatter() {if (display.isUsePercentValues()) {return new PercentFormatter();}return new LocalizedValueFormatter();}@NonNullprivate IValueFormatter determineDataSetValueFormatter() {if (display.isUsePercentValues()) {return new PercentFormatter();}return new LargeValueFormatter();}}",FamilyFinance/app/src/main/java/io/github/zwieback/familyfinance/business/chart/fragment/HorizontalBarChartFragment.java
2,"package io.github.zwieback.familyfinance.business.chart.fragment;import android.content.res.Configuration;import android.graphics.Color;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.annotation.StringRes;import com.github.mikephil.charting.animation.Easing;import com.github.mikephil.charting.charts.PieChart;import com.github.mikephil.charting.components.Legend;import com.github.mikephil.charting.data.PieData;import com.github.mikephil.charting.data.PieDataSet;import com.github.mikephil.charting.data.PieEntry;import com.github.mikephil.charting.formatter.IValueFormatter;import com.github.mikephil.charting.formatter.LargeValueFormatter;import com.github.mikephil.charting.formatter.PercentFormatter;import java.util.Collections;import java.util.List;import java.util.Map;import io.github.zwieback.familyfinance.R;import io.github.zwieback.familyfinance.business.chart.display.PieChartDisplay;import io.github.zwieback.familyfinance.business.chart.exception.UnsupportedPieChartGroupByTypeException;import io.github.zwieback.familyfinance.business.chart.exception.UnsupportedPieChartGroupingTypeException;import io.github.zwieback.familyfinance.business.chart.marker.PieChartMarkerView;import io.github.zwieback.familyfinance.business.chart.service.converter.OperationConverter;import io.github.zwieback.familyfinance.business.chart.service.converter.pie.OperationPieLimitConverter;import io.github.zwieback.familyfinance.business.chart.service.converter.pie.OperationPieSimpleConverter;import io.github.zwieback.familyfinance.business.chart.service.formatter.LocalizedValueFormatter;import io.github.zwieback.familyfinance.business.chart.service.grouper.OperationGrouper;import io.github.zwieback.familyfinance.business.chart.service.grouper.pie.OperationGrouperByArticle;import io.github.zwieback.familyfinance.business.chart.service.grouper.pie.OperationGrouperByArticleParent;import io.github.zwieback.familyfinance.business.operation.filter.OperationFilter;import io.github.zwieback.familyfinance.core.model.OperationView;import io.github.zwieback.familyfinance.util.ColorUtils;import io.github.zwieback.familyfinance.util.ConfigurationUtils;public abstract class PieChartFragment<F extends OperationFilter> extends ChartFragment<PieChart,PieEntry, F, PieChartDisplay> {private static final float SLICE_SPACE = 2f;private static final int Y_AXIS_ANIMATION_DURATION = 500;private float pieValueTextSize;@Overridepublic void onCreate(@Nullable Bundle savedInstanceState) {super.onCreate(savedInstanceState);pieValueTextSize = getResources().getDimension(R.dimen.pie_value_text_size);}@Overrideprotected int getFragmentChartLayout() {return R.layout.fragment_chart_pie;}@Overrideprotected int getChartId() {return R.id.pie_chart;}@Overrideprotected String getDisplayName() {return PieChartDisplay.PIE_CHART_DISPLAY;}@Overrideprotected PieChartDisplay createDefaultDisplay() {return new PieChartDisplay();}@Overrideprotected void setupChart() {chart.setUsePercentValues(display.isUsePercentValues());chart.getDescription().setEnabled(false);chart.setEntryLabelColor(Color.BLACK);chart.setEntryLabelTextSize(pieValueTextSize);setupLegend();setupMarker();}private void setupLegend() {Legend legend = chart.getLegend();legend.setVerticalAlignment(Legend.LegendVerticalAlignment.TOP);legend.setOrientation(determineLegendOrientation());legend.setWordWrapEnabled(true);}private Legend.LegendOrientation determineLegendOrientation() {return ConfigurationUtils.getOrientation() == Configuration.ORIENTATION_PORTRAIT? Legend.LegendOrientation.HORIZONTAL: Legend.LegendOrientation.VERTICAL;}private void setupMarker() {PieChartMarkerView mv = new PieChartMarkerView(extractContext(),new LocalizedValueFormatter());mv.setChartView(chart);chart.setMarker(mv);}@Overrideprotected void showData(Map<Float, List<OperationView>> groupedOperations) {if (groupedOperations.isEmpty()) {clearData(R.string.chart_no_data);return;}PieDataSet expenseSet = buildPieDataSet(groupedOperations, getDataSetLabel());PieData data = new PieData(expenseSet);data.setValueFormatter(determineFormatter());data.setDrawValues(display.isViewValues());chart.setUsePercentValues(display.isUsePercentValues());chart.setData(data);chart.animateY(Y_AXIS_ANIMATION_DURATION, Easing.EasingOption.EaseInOutQuad);}@StringResprotected abstract int getDataSetLabel();private PieDataSet buildPieDataSet(Map<Float, List<OperationView>> operations,@StringRes int dataSetLabel) {List<Integer> colors = collectDataColors();List<PieEntry> pieEntries = convertOperations(operations);PieDataSet dataSet = new PieDataSet(pieEntries, getString(dataSetLabel));dataSet.setDrawIcons(false);dataSet.setColors(colors);dataSet.setSliceSpace(SLICE_SPACE);dataSet.setValueTextSize(pieValueTextSize);return dataSet;}private List<Integer> collectDataColors() {List<Integer> colors = ColorUtils.collectMaterialDesignColors(extractContext());Collections.shuffle(colors);return colors;}@Overridepublic void onApplyFilter(F filter) {this.filter = filter;refreshData();}@Overridepublic void onApplyDisplay(PieChartDisplay display) {if (this.display.needRefreshData(display)) {this.display = display;operationConverter = determineOperationConverter();operationGrouper = determineOperationGrouper();refreshData();} else {this.display = display;chart.getData().setDrawValues(display.isViewValues());chart.getData().setValueFormatter(determineFormatter());chart.setUsePercentValues(display.isUsePercentValues());chart.invalidate();}}@Overrideprotected OperationConverter<PieEntry> determineOperationConverter() {switch (display.getGroupingType()) {case SIMPLE:return new OperationPieSimpleConverter(extractContext(), display.getGroupByType());case LIMIT:return new OperationPieLimitConverter(extractContext(), display.getGroupByType());}throw new UnsupportedPieChartGroupingTypeException();}@Overrideprotected OperationGrouper determineOperationGrouper() {switch (display.getGroupByType()) {case ARTICLE:return new OperationGrouperByArticle();case ARTICLE_PARENT:return new OperationGrouperByArticleParent();}throw new UnsupportedPieChartGroupByTypeException();}private IValueFormatter determineFormatter() {return display.isUsePercentValues()? new PercentFormatter(): new LargeValueFormatter();}}",FamilyFinance/app/src/main/java/io/github/zwieback/familyfinance/business/chart/fragment/PieChartFragment.java
53,"/*#######################################################**   Maintained by Gregor Santner, 2018-*   https://gsantner.net/**   License of this file: Apache 2.0 (Commercial upon request)*     https://www.apache.org/licenses/LICENSE-2.0*#########################################################*/package net.gsantner.markor.ui;import android.annotation.SuppressLint;import android.app.Dialog;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.support.annotation.NonNull;import android.support.v4.app.DialogFragment;import android.support.v4.provider.DocumentFile;import android.support.v7.app.AlertDialog;import android.text.InputFilter;import android.text.TextUtils;import android.view.LayoutInflater;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.CheckBox;import android.widget.EditText;import android.widget.Spinner;import net.gsantner.markor.R;import net.gsantner.markor.format.todotxt.TodoTxtTask;import net.gsantner.markor.util.AppSettings;import net.gsantner.markor.util.ShareUtil;import net.gsantner.opoc.ui.AndroidSpinnerOnItemSelectedAdapter;import net.gsantner.opoc.util.Callback;import net.gsantner.opoc.util.ContextUtils;import java.io.File;import java.security.SecureRandom;import java.util.Date;import java.util.concurrent.atomic.AtomicBoolean;import other.de.stanetz.jpencconverter.JavaPasswordbasedCryption;import other.de.stanetz.jpencconverter.PasswordStore;public class NewFileDialog extends DialogFragment {public static final String FRAGMENT_TAG = ""net.gsantner.markor.ui.NewFileDialog"";public static final String EXTRA_DIR = ""EXTRA_DIR"";private Callback.a2<Boolean, File> callback;public static NewFileDialog newInstance(File sourceFile, Callback.a2<Boolean, File> callback) {NewFileDialog dialog = new NewFileDialog();Bundle args = new Bundle();args.putSerializable(EXTRA_DIR, sourceFile);dialog.setArguments(args);dialog.callback = callback;return dialog;}@NonNull@Overridepublic Dialog onCreateDialog(Bundle savedInstanceState) {final File file = (File) getArguments().getSerializable(EXTRA_DIR);LayoutInflater inflater = LayoutInflater.from(getActivity());AlertDialog.Builder dialogBuilder = makeDialog(file, inflater);AlertDialog dialog = dialogBuilder.show();Window w;if ((w = dialog.getWindow()) != null) {w.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);}return dialog;}@SuppressLint(""SetTextI18n"")private AlertDialog.Builder makeDialog(final File basedir, LayoutInflater inflater) {View root;AlertDialog.Builder dialogBuilder;final AppSettings appSettings = new AppSettings(inflater.getContext());dialogBuilder = new AlertDialog.Builder(inflater.getContext(), appSettings.isDarkThemeEnabled() ? R.style.Theme_AppCompat_Dialog : R.style.Theme_AppCompat_Light_Dialog);root = inflater.inflate(R.layout.new_file_dialog, null);final EditText fileNameEdit = root.findViewById(R.id.new_file_dialog__name);final EditText fileExtEdit = root.findViewById(R.id.new_file_dialog__ext);final CheckBox encryptCheckbox = root.findViewById(R.id.new_file_dialog__encrypt);final Spinner typeSpinner = root.findViewById(R.id.new_file_dialog__type);final Spinner templateSpinner = root.findViewById(R.id.new_file_dialog__template);final String[] typeSpinnerToExtension = getResources().getStringArray(R.array.new_file_types__file_extension);if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && appSettings.hasPasswordBeenSetOnce()) {encryptCheckbox.setChecked(appSettings.getNewFileDialogLastUsedEncryption());} else {encryptCheckbox.setVisibility(View.GONE);}fileExtEdit.setText(appSettings.getNewFileDialogLastUsedExtension());fileNameEdit.requestFocus();new Handler().postDelayed(new ContextUtils.DoTouchView(fileNameEdit), 200);fileNameEdit.setFilters(new InputFilter[]{ContextUtils.INPUTFILTER_FILENAME});fileExtEdit.setFilters(fileNameEdit.getFilters());final AtomicBoolean typeSpinnerNoTriggerOnFirst = new AtomicBoolean(true);typeSpinner.setOnItemSelectedListener(new AndroidSpinnerOnItemSelectedAdapter(pos -> {if (typeSpinnerNoTriggerOnFirst.getAndSet(false)) {return;}String ext = pos < typeSpinnerToExtension.length ? typeSpinnerToExtension[pos] : """";if (ext != null) {if (encryptCheckbox.isChecked()) {fileExtEdit.setText(ext + JavaPasswordbasedCryption.DEFAULT_ENCRYPTION_EXTENSION);} else {fileExtEdit.setText(ext);}}fileNameEdit.setSelection(fileNameEdit.length());appSettings.setNewFileDialogLastUsedType(typeSpinner.getSelectedItemPosition());}));typeSpinner.setSelection(appSettings.getNewFileDialogLastUsedType());templateSpinner.setOnItemSelectedListener(new AndroidSpinnerOnItemSelectedAdapter(pos -> {String prefix = null;if (pos == 3) { // Jekyllprefix = TodoTxtTask.DATEF_YYYY_MM_DD.format(new Date()) + ""-"";}if (!TextUtils.isEmpty(prefix) && !fileNameEdit.getText().toString().startsWith(prefix)) {fileNameEdit.setText(prefix + fileNameEdit.getText().toString());}fileNameEdit.setSelection(fileNameEdit.length());}));encryptCheckbox.setOnCheckedChangeListener((buttonView, isChecked) -> {final String currentExtention = fileExtEdit.getText().toString();if (isChecked) {if (!currentExtention.endsWith(JavaPasswordbasedCryption.DEFAULT_ENCRYPTION_EXTENSION)) {fileExtEdit.setText(currentExtention + JavaPasswordbasedCryption.DEFAULT_ENCRYPTION_EXTENSION);}} else if (currentExtention.endsWith(JavaPasswordbasedCryption.DEFAULT_ENCRYPTION_EXTENSION)) {fileExtEdit.setText(currentExtention.replace(JavaPasswordbasedCryption.DEFAULT_ENCRYPTION_EXTENSION, """"));}appSettings.setNewFileDialogLastUsedEncryption(isChecked);});dialogBuilder.setView(root);fileNameEdit.requestFocus();final ShareUtil shareUtil = new ShareUtil(getContext());dialogBuilder.setNegativeButton(R.string.cancel, (dialogInterface, i) -> dialogInterface.dismiss()).setPositiveButton(getString(android.R.string.ok), (dialogInterface, i) -> {if (ez(fileNameEdit)) {return;}appSettings.setNewFileDialogLastUsedExtension(fileExtEdit.getText().toString().trim());final File f = new File(basedir, fileNameEdit.getText().toString().trim() + fileExtEdit.getText().toString().trim());final byte[] templateContents = getTemplateContent(templateSpinner, basedir, encryptCheckbox.isChecked());shareUtil.writeFile(f, false, (arg_ok, arg_fos) -> {try {if (f.exists() && f.length() < ShareUtil.MIN_OVERWRITE_LENGTH && templateContents != null) {arg_fos.write(templateContents);}} catch (Exception ignored) {}callback(arg_ok || f.exists(), f);dialogInterface.dismiss();});}).setNeutralButton(R.string.folder, (dialogInterface, i) -> {if (ez(fileNameEdit)) {return;}File f = new File(basedir, fileNameEdit.getText().toString());if (shareUtil.isUnderStorageAccessFolder(f)) {DocumentFile dof = shareUtil.getDocumentFile(f, true);callback(dof != null && dof.exists(), f);} else {callback(f.mkdirs() || f.exists(), f);}dialogInterface.dismiss();});return dialogBuilder;}private boolean ez(EditText et) {return et.getText().toString().isEmpty();}private void callback(boolean ok, File file) {try {callback.callback(ok, file);} catch (Exception ignored) {}}// How to get content out of a file:// 1) Replace \n with \\n | copy to clipboard//    cat markor-markdown-reference.md  | sed 's@\\@\\\\@g' | sed -z 's@\n@\\n@g'  | xclip//// 2) t = ""<cursor>"";  | ctrl+shift+v ""paste without formatting""//private byte[] getTemplateContent(final Spinner templateSpinner, final File basedir, final boolean encrypt) {String t = null;byte[] bytes = null;switch (templateSpinner.getSelectedItemPosition()) {case 1: {t = ""# Markdown Reference\nAutomatically generate _table of contents_ by checking the option here: `Settings > Format > Markdown`.\n\n## H2 Header\n### H3 header\n#### H4 Header\n##### H5 Header\n###### H6 Header\n\n<!-- --------------- -->\n\n## Format Text\n\n*Italic emphasis* , _Alternative italic emphasis_\n\n**Bold emphasis** , __Alternative bold emphasis__\n\n~~Strikethrough~~\n\nBreak line (two spaces at end of line)  \n\n> Block quote\n\n`Inline code`\n\n```\nCode blocks\nare\nawesome\n```\n\n<!-- --------------- -->\n \n## Lists\n### Ordered & unordered\n\n* Unordered list\n* ...with asterisk/star\n* Test\n\n- Another unordered list\n- ...with hyphen/minus\n- Test\n\n1. Ordered list\n2. Test\n3. Test\n4. Test\n\n- Nested lists\n    * Unordered nested list\n    * Test\n    * Test\n    * Test\n- Ordered nested list\n    1. Test\n    2. Test\n    3. Test\n    4. Test\n- Double-nested unordered list\n    - Test\n    - Unordered\n        - Test a\n        - Test b\n    - Ordered\n        1. Test 1\n        2. Test 2\n\n### Checklist\n* [ ] Salad\n* [x] Potatoes\n\n1. [x] Clean\n2. [ ] Cook\n\n<!-- --------------- -->\n\n## Links\n[Link](https://duckduckgo.com/)\n\n[File in same folder as the document.](markor-markdown-reference.md) Use %20 for spaces!\n\n<!-- --------------- -->\n\n## Tables\n\n| Left aligned | Middle aligned | Right aligned |\n| :--------------- | :------------------: | -----------------: |\n| Test                 | Test                      | Test                    |\n| Test                 | Test                      | Test                    |\n\n÷÷÷÷\n\nShorter | Table | Syntax\n:---: | ---: | :---\nTest | Test | Test\nTest | Test | Test\n\n<!-- Comment: Not visibile in view. Can also span across multiple lines. End with:-->\n\n<!-- --------------- -->\n\n## Math (KaTeX)\nSee [reference](https://katex.org/docs/supported.html) & [examples](https://github.com/waylonflinn/markdown-it-katex/blob/master/README.md). Enable by checking Math at `Settings > Markdown`.\n\n### Math inline\n\n$ I = \\frac V R $\n\n### Math block\n\n<div>\n$$\\begin{array}{c} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} & = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} & = 0 \\end{array}$$\n</div>\n\n\n$$\\frac{k_t}{k_e} = \\sqrt{2}$$\n\n<!-- --------------- -->\n\n## Format Text (continued)\n\n### Text color\n\n<span style='background-color:#ffcb2e;'>Text with background color / highlight</span>\n\n<span style='color:#3333ff;'>Text foreground color</span>\n\n<span style='text-shadow: 0px 0px 2px #FF0000;'>Text with colored outline</span> / <span style='text-shadow: 0px 0px 2px #0000FF; color: white'>Text with colored outline</span>\n\n\n### Text sub & superscript\n\n<u>Underline</u>\n\nThe <sub>Subway</sub> sandwich was <sup>super</sup>\n\nSuper special characters: ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁺ ⁻ ⁼ ⁽ ⁾ ⁿ ™ ® ℠\n\n### Text positioning\n<div markdown='1' align='right'>\n\ntext on the **right**\n\n</div>\n\n<div markdown='1' align='center'>\n\ntext in the **center**  \n(one empy line above and below  \nrequired for Markdown support OR markdown='1')\n\n</div>\n\n### Block Text\n\n<div markdown='1' style='text-align: justify; text-justify: inter-word;'>\nlorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. \n</div>\n\n### Dropdown\n\n<details markdown='1'><summary>Click to Expand/Collapse</summary>\n\nExpanded content. Shows up and keeps visible when clicking expand. Hide again by clicking the dropdown button again.\n\n</details>\n\n\n<!-- --------------- -->\n\n## Multimedia\n\n### Images\n![Image](https://gsantner.net/assets/blog/img/markor/markor-v1-7-showcase-3.jpg)\n\n### Videos\n**Youtube** [Welcome to Upper Austria](https://www.youtube.com/watch?v=RJREFH7Lmm8)\n<iframe width='360' height='200' src='https://www.youtube.com/embed/RJREFH7Lmm8'> </iframe>\n\n**Peertube** [Road in the wood](https://open.tube/videos/watch/8116312a-dbbd-43a3-9260-9ea6367c72fc)\n<div><video controls><source src='https://peertube.mastodon.host/download/videos/8116312a-dbbd-43a3-9260-9ea6367c72fc-480.mp4' </source></video></div>\n\n<!-- **Local video** <div><video controls><source src='voice-parrot.mp4' </source></video></div> -->\n\n### Audio & Music\n**Web audio** [Guifrog - Xia Yu](https://www.freemusicarchive.org/music/Guifrog/Xia_Yu)\n<audio controls src='https://files.freemusicarchive.org/storage-freemusicarchive-org/music/ccCommunity/Guifrog/Xia_Yu/Guifrog_-_Xia_Yu.mp3'></audio>\n\n**Local audio** Yellowcard - Lights up in the sky\n<audio controls src='../Music/mp3/Yellowcard/[2007]%20Paper%20Walls/Yellowcard%20-%2005%20-%20Light%20Up%20the%20Sky.mp3'></audio>\n\n------------------\n\nThis Markdown reference file was created for the [Markor](https://gsantner.net/project/markor?source=markdownref) project by [Gregor Santner](https://gsantner.net) and is licensed [Creative Commons Zero 1.0](https://creativecommons.org/publicdomain/zero/1.0/legalcode) (public domain). File revision 2.\n\n------------------\n\n\n"";break;}case 2: {t = ""(A) Call Mom @mobile +family\n(A) Schedule annual checkup +health\n(A) Urgently buy milk @shop\n(B) Outline chapter 5 +novel @computer\n(C) Add cover sheets @work +myproject\nPlan backyard herb garden @home\nBuy salad @shop\nWrite blog post @pc\nInstall Markor @mobile\n2019-06-24 scan photos @home +blog\n2019-06-25 draw diagram @work \nx This has been done @home +renovations"";break;}case 3: {t = ""---\nlayout: post\ntags: []\ncategories: []\n#date: 2019-06-25 13:14:15\n#excerpt: ''\n#image: 'BASEURL/assets/blog/img/.png'\n#description:\n#permalink:\ntitle: 'title'\n---\n\n\n"";break;}case 4: {t = ""# Title\n## Description\n\n![Text](picture.png)\n\n### Ingredients\n\n|  Ingredient   | Amount |\n|:--------------|:-------|\n| 1             | 1      |\n| 2             | 2      |\n| 3             | 3      |\n| 4             | 4      |\n\n\n### Preparation\n\n1. Text\n2. Text\n\n"";break;}case 5: {t = ""---\nclass: beamer\n---\n\n-----------------\n# Cool presentation\n\n## Abed Nadir\n\n{{ post.date_today }}\n\n<!-- Overall slide design -->\n<style>\n.slide {\nbackground:url() no-repeat center center fixed; background-size: cover;\n}\n.slide_type_title {\nbackground: slategrey;\n}\n</style>\n\n-----------------\n\n## Slide title\n\n\n1. All Markdown features of Markor are **supported** for Slides too ~~strikeout~~ _italic_ `code`\n2. Start new slides with 3 more hyphens (---) separated by empty lines\n3. End last slide with hyphens too\n4. Slide backgrounds can be configured using CSS, for all and individual slides\n5. Print / PDF export in landscape mode\n6. Create title only slides (like first slide) by starting the slide (line after `---`) with title `# title`\n\n\n-----------------\n## Slide with centered image\n* Images can be centered by adding 'imghcenter' in alt text & grown to page size with 'imgbig'\n* Example: `![text imghcenter imgbig text](a.jpg)`\n\n![imghcenter imgbig](file:///android_asset/img/flowerfield.jpg)\n\n\n\n\n-----------------\n## Page with gradient background\n* and a picture\n* configure background color/image with CSS .slide_p4 { } (4 = the slide page number)\n\n![pic](file:///android_asset/img/flowerfield.jpg)\n\n\n<style> .slide_p4 { background: linear-gradient(to bottom, #11998e, #38ef7d); } </style>\n\n-----------------\n## Page with image background\n* containing text and a table\n\n| Left aligned | Middle aligned | Right aligned |\n| :------------------- | :----------------------: | --------------------: |\n| Test               | Test                    | Test                |\n| Test               | Test                    | Test                |\n\n\n\n<style> \n.slide_p5 { background: url('file:///android_asset/img/schindelpattern.jpg') no-repeat center center fixed; background-size: cover; }\n.slide_p5 > .slide_body > * { color: black; }\n</style>\n\n-----------------\n"";break;}case 6: {t = ""Content-Type: text/x-zim-wiki\nWiki-Format: zim 0.4\nCreation-Date: 2019-01-28T20:53:47+01:00\n\n====== Zim Wiki ======\nLet me try to gather a list of the formatting options Zim provides.\n\n====== Head 1 ======\n\n===== Head 2 =====\n\n==== Head 3 ====\n\n=== Head 4 ===\n\n== Head 5 ==\n\n**Bold**\n//italics//\n__marked (yellow Background)__\n~~striked~~\n\n* Unordered List\n* second item\n	* [[Sub-Item]]\n		* Subsub-Item\n			* and one more sub\n* Back to first indent level\n\n1. ordered list\n2. second item\n	a. item 2a\n		1. Item 2a1\n		2. Item 2a2\n	b. item 2b\n		1. 2b1\n			a. 2b1a\n3. an so on...\n\n[ ] Checklist\n[ ] unchecked item\n[*] checked item\n[x] crossed item\n[>] Item marked with a yellow left-to-right-arrow\n[ ] another unchecked item\n\n\nThis ist ''preformatted text'' inline.\n\n'''\nThis is a preformatted text block.\nIt spans multiple lines.\nAnd it's visually indented.\n'''\n\nWe also have _{subscript} and ^{superscript}.\n\nIt seems there is no way to combine those styles.\n//**this is simply italic**// and you can see the asterisks.\n**//This is simply bold//** and you can see the slashes.\n__**This is simply marked yellow**__ and you can see the asterisks.\n\nThis is a web link: [[https://github.com/gsantner/markor|Markor on Github]]\nLinks inside the Zim Wiki project can be made by simply using the [[Page Name]] in double square brackets.\nThis my also contain some hierarchy information, like [[Folder:Subfolder:Document Name]]\n\n\nThis zim wiki reference file was created for the [[https://gsantner.net/project/markor?source=markdownref|Markor]] project by [[https://gsantner.net|Gregor Santner]] and is licensed [[https://creativecommons.org/publicdomain/zero/1.0/legalcode|Creative Commons Zero 1.0]] (public domain). File revision 1."";break;}case 7: {t = ""---\ntags: []\ncreated: '{{ template.timestamp_date_yyyy_mm_dd }}'\ntitle: ''\n---\n\n"";if (basedir != null && new File(basedir.getParentFile(), "".notabledir"").exists()) {t = t.replace(""created:"", ""modified:"");}break;}default:case 0: {return null; // Empty file template (that doesn't overwrite anything}}t = t.replace(""{{ template.timestamp_date_yyyy_mm_dd }}"", TodoTxtTask.DATEF_YYYY_MM_DD.format(new Date()));if (encrypt && Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {bytes = new JavaPasswordbasedCryption(JavaPasswordbasedCryption.Version.V001, new SecureRandom()).encrypt(t, new PasswordStore(getContext()).loadKey(R.string.pref_key__default_encryption_password));} else {bytes = t.getBytes();}return bytes;}}",markor/app/src/main/java/net/gsantner/markor/ui/NewFileDialog.java
53,"/*#######################################################**   Maintained by Gregor Santner, 2017-*   https://gsantner.net/**   License of this file: Apache 2.0 (Commercial upon request)*     https://www.apache.org/licenses/LICENSE-2.0*#########################################################*/package net.gsantner.markor.util;import android.content.Context;import android.content.SharedPreferences;import android.graphics.Color;import android.os.Build;import android.os.Environment;import android.support.annotation.ColorRes;import android.support.annotation.IdRes;import android.support.v4.util.Pair;import net.gsantner.markor.App;import net.gsantner.markor.BuildConfig;import net.gsantner.markor.R;import net.gsantner.opoc.preference.SharedPreferencesPropertyBackend;import net.gsantner.opoc.ui.FilesystemViewerAdapter;import net.gsantner.opoc.ui.FilesystemViewerFragment;import java.io.File;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.Locale;import java.util.Random;@SuppressWarnings(""SameParameterValue"")public class AppSettings extends SharedPreferencesPropertyBackend {private final SharedPreferences _prefCache;private final SharedPreferences _prefHistory;public static Boolean isDeviceGoodHardware = null;private static final File LOCAL_TESTFOLDER_FILEPATH = new File(""/storage/emulated/0/00_sync/documents/special"");public AppSettings(Context _context) {super(_context);_prefCache = _context.getSharedPreferences(""cache"", Context.MODE_PRIVATE);_prefHistory = _context.getSharedPreferences(""history"", Context.MODE_PRIVATE);if (isDeviceGoodHardware == null) {ContextUtils cu = new ContextUtils(_context);isDeviceGoodHardware = cu.isDeviceGoodHardware();cu.freeContextRef();}}public static AppSettings get() {return new AppSettings(App.get());}public void setDarkThemeEnabled(boolean enabled) {setString(R.string.pref_key__app_theme, enabled ? ""dark"" : ""light"");}public boolean isDarkThemeEnabled() {switch (getString(R.string.pref_key__app_theme, ""light"")) {case ""light"": {return false;}case ""dark"": {return true;}case ""auto"":default: {return !isCurrentHourOfDayBetween(9, 17);}}}public int getBackgroundColor() {return isDarkThemeEnabled() ? rcolor(R.color.dark__background) : rcolor(R.color.light__background);}public boolean isLoadLastDirectoryAtStartup() {return getBool(R.string.pref_key__load_last_directory_at_startup, false);}public boolean isPreviewFirst() {return getBool(R.string.pref_key__is_preview_first, false);}public void setSaveDirectory(String value) {setString(R.string.pref_key__notebook_directory, value);}public File getNotebookDirectory() {return new File(getNotebookDirectoryAsStr());}public String getNotebookDirectoryAsStr() {String dir = getString(R.string.pref_key__notebook_directory, """");if (dir.isEmpty() && LOCAL_TESTFOLDER_FILEPATH.exists() && !BuildConfig.IS_TEST_BUILD) {dir = LOCAL_TESTFOLDER_FILEPATH.getParentFile().getParent();setSaveDirectory(dir);}if (dir.isEmpty()) {dir = new File(new File(Environment.getExternalStorageDirectory(), ""/Documents""), rstr(R.string.app_name).toLowerCase(Locale.ROOT)).getAbsolutePath();setSaveDirectory(dir);}return dir;}public File getQuickNoteFile() {String defaultValue = new File(getNotebookDirectoryAsStr(), rstr(R.string.quicknote_default_filename)).getAbsolutePath();if (LOCAL_TESTFOLDER_FILEPATH.exists() && !BuildConfig.IS_TEST_BUILD) {defaultValue = new File(LOCAL_TESTFOLDER_FILEPATH, rstr(R.string.quicknote_default_filename)).getAbsolutePath();}return new File(getString(R.string.pref_key__quicknote_filepath, defaultValue));}public void setQuickNoteFile(File file) {setString(R.string.pref_key__quicknote_filepath, file.getAbsolutePath());}public File getTodoFile() {String defaultValue = new File(getNotebookDirectoryAsStr(), rstr(R.string.todo_default_filename)).getAbsolutePath();if (LOCAL_TESTFOLDER_FILEPATH.exists() && !BuildConfig.IS_TEST_BUILD) {defaultValue = new File(LOCAL_TESTFOLDER_FILEPATH, rstr(R.string.todo_default_filename)).getAbsolutePath();}return new File(getString(R.string.pref_key__todo_filepath, defaultValue));}public void setTodoFile(File file) {setString(R.string.pref_key__todo_filepath, file.getAbsolutePath());}public String getFontFamily() {return getString(R.string.pref_key__font_family, rstr(R.string.default_font_family));}public int getFontSize() {return getInt(R.string.pref_key__editor_font_size, 15);}public int getViewFontSize() {int size = getInt(R.string.pref_key__view_font_size, -1);return size < 2 ? getFontSize() : size;}public boolean isHighlightingEnabled() {return getBool(R.string.pref_key__is_highlighting_activated, true);}public int getMarkdownHighlightingDelay() {return getInt(R.string.pref_key__markdown__hl_delay_v2, 650);}public boolean isMarkdownHighlightLineEnding() {return getBool(R.string.pref_key__markdown__highlight_lineending_two_or_more_space, false);}public boolean isMarkdownHighlightCodeFontMonospaceAllowed() {return getBool(R.string.pref_key__markdown__monospace_some_parts, false);}public boolean isMarkdownDisableCodeBlockHighlight() {return getBool(R.string.pref_key__markdown__disable_code_block_highlight, false);}public boolean isMarkdownAutoUpdateList() {return true;// return getBool(R.string.pref_key__markdown__auto_renumber_ordered_list, false);}public int getHighlightingDelayTodoTxt() {return getInt(R.string.pref_key__todotxt__hl_delay, 870);}public String getLastOpenedDirectory() {return getString(R.string.pref_key__last_opened_directory, getNotebookDirectoryAsStr());}public void setLastOpenedDirectory(String value) {setString(R.string.pref_key__last_opened_directory, value);}public boolean isRenderRtl() {return getBool(R.string.pref_key__is_render_rtl, false);}public boolean isMarkdownMathEnabled() {return getBool(R.string.pref_key__markdown_render_math, false);}public boolean isMarkdownTableOfContentsEnabled() {return getBool(R.string.pref_key__markdown_show_toc, false);}public boolean isEditorStatusBarHidden() {return getBool(R.string.pref_key__is_editor_statusbar_hidden, false);}public boolean isSpecialFileLaunchersEnabled() {if (BuildConfig.IS_TEST_BUILD) {return false;}return getBool(R.string.pref_key__is_launcher_for_special_files_enabled, false);}public boolean isKeepScreenOn() {return getBool(R.string.pref_key__is_keep_screen_on, !BuildConfig.IS_TEST_BUILD);}public boolean isOverviewStatusBarHidden() {return getBool(R.string.pref_key__is_overview_statusbar_hidden, false);}public String getLanguage() {return getString(R.string.pref_key__language, """");}public void setRecreateMainRequired(boolean value) {setBool(R.string.pref_key__is_main_recreate_required, value);}public boolean isRecreateMainRequired() {boolean ret = getBool(R.string.pref_key__is_main_recreate_required, false);setBool(R.string.pref_key__is_main_recreate_required, false);return ret;}public void setSortMethod(int value) {setInt(R.string.pref_key__sort_method, value);}public int getSortMethod() {return getInt(R.string.pref_key__sort_method, FilesystemViewerFragment.SORT_BY_NAME);}public void setSortReverse(boolean value) {setBool(R.string.pref_key__sort_reverse, value);}public boolean isSortReverse() {return getBool(R.string.pref_key__sort_reverse, false);}public boolean isShowSettingsOptionInMainToolbar() {return true;//getBool(R.string.pref_key__show_settings_option_in_main_toolbar, true);}public boolean isHighlightingHexColorEnabled() {return getBool(R.string.pref_key__is_highlighting_for_hexcolor_activated, false);}public boolean isTodoAppendProConOnEndEnabled() {return getBool(R.string.pref_key__todotxt__append_contexts_and_projects_on_end_of_task, true);}public boolean isTodoStartTasksWithTodaysDateEnabled() {return getBool(R.string.pref_key__todotxt__start_new_tasks_with_todays_date, true);}public boolean isTodoAddCompletionDateEnabled() {return getBool(R.string.pref_key__todotxt__add_completion_date_for_todos, true);}public boolean isAppCurrentVersionFirstStart(boolean doSet) {int value = getInt(R.string.pref_key__app_first_start_current_version, -1);if (doSet) {setInt(R.string.pref_key__app_first_start_current_version, BuildConfig.VERSION_CODE);}return value != BuildConfig.VERSION_CODE;}public float getEditorLineSpacing() {return getInt(R.string.pref_key__editor_line_spacing, 100) / 100f;}public void setLastTodoUsedArchiveFilename(String value) {setString(R.string.pref_key__todotxt__last_used_archive_filename, value);}public String getLastTodoUsedArchiveFilename() {return getString(R.string.pref_key__todotxt__last_used_archive_filename, ""todo.archive.txt"");}public boolean isEditorStartOnBotttom() {return getBool(R.string.pref_key__editor_start_editing_on_bottom, true);}public boolean isEditorStartEditingInCenter() {return getBool(R.string.pref_key__editor_start_editing_in_center, false);}public int getEditorTextActionItemPadding() {return getInt(R.string.pref_key__editor_textaction_bar_item_padding, 8);}public boolean isDisableSpellingRedUnderline() {return getBool(R.string.pref_key__editor_disable_spelling_red_underline, true);}public void addRecentDocument(File file) {if (!listFileInRecents(file)) {return;}if (!file.equals(getTodoFile()) && !file.equals(getQuickNoteFile())) {ArrayList<String> recent = getRecentDocuments();recent.add(0, file.getAbsolutePath());recent.remove(getTodoFile().getAbsolutePath());recent.remove(getQuickNoteFile().getAbsolutePath());recent.remove("""");recent.remove(null);setInt(file.getAbsolutePath(), getInt(file.getAbsolutePath(), 0, _prefCache) + 1, _prefCache);setRecentDocuments(recent);}ShortcutUtils.setShortcuts(_context);}public void toggleFavouriteFile(File file) {List<String> list = new ArrayList<>();List<File> favourites = getFavouriteFiles();for (File f : favourites) {if (f != null && (f.exists() || FilesystemViewerAdapter.isVirtualStorage(f))) {list.add(f.getAbsolutePath());}}String abs = file.getAbsolutePath();if (list.contains(abs)) {list.remove(abs);} else {list.add(abs);}setStringList(R.string.pref_key__favourite_files, list);}private static final String PREF_PREFIX_EDIT_POS_CHAR = ""PREF_PREFIX_EDIT_POS_CHAR"";private static final String PREF_PREFIX_EDIT_POS_SCROLL = ""PREF_PREFIX_EDIT_POS_SCROLL"";public void setLastEditPosition(File file, int pos, int scrolloffset) {if (file == null || !file.exists()) {return;}if (!file.equals(getTodoFile()) && !file.equals(getQuickNoteFile())) {setInt(PREF_PREFIX_EDIT_POS_CHAR + file.getAbsolutePath(), pos, _prefCache);setInt(PREF_PREFIX_EDIT_POS_SCROLL + file.getAbsolutePath(), scrolloffset, _prefCache);}}public int getLastEditPositionChar(File file) {if (file == null || !file.exists()) {return -1;}if (file.equals(getTodoFile()) || file.equals(getQuickNoteFile())) {return -2;}return getInt(PREF_PREFIX_EDIT_POS_CHAR + file.getAbsolutePath(), -3, _prefCache);}public int getLastEditPositionScroll(File file) {if (file == null || !file.exists()) {return 0;}return getInt(PREF_PREFIX_EDIT_POS_SCROLL + file.getAbsolutePath(), 0, _prefCache);}private List<String> getPopularDocumentsSorted() {List<String> popular = getRecentDocuments();Collections.sort(popular, new Comparator<String>() {@Overridepublic int compare(String o1, String o2) {return Integer.compare(getInt(o1, 0, _prefCache), getInt(o2, 0, _prefCache));}});return popular;}public List<String> getPopularDocuments() {return getStringList(R.string.pref_key__popular_documents);}public void setPopularDocuments(List<String> v) {limitListTo(v, 20, true);setStringList(R.string.pref_key__popular_documents, v, _prefApp);}public void setRecentDocuments(List<String> v) {limitListTo(v, 20, true);setStringList(R.string.pref_key__recent_documents, v, _prefApp);setPopularDocuments(getPopularDocumentsSorted());}public ArrayList<String> getRecentDocuments() {ArrayList<String> list = getStringList(R.string.pref_key__recent_documents);for (int i = 0; i < list.size(); i++) {if (!new File(list.get(i)).isFile()) {list.remove(i);i--;}}return list;}public ArrayList<File> getAsFileList(List<String> list) {ArrayList<File> r = new ArrayList<>();for (String f : list) {r.add(new File(f));}return r;}public ArrayList<File> getFavouriteFiles() {ArrayList<File> list = new ArrayList<>();for (String fp : getStringList(R.string.pref_key__favourite_files)) {File f = new File(fp);if (f.exists() || FilesystemViewerAdapter.isVirtualStorage(f)) {list.add(f);}}return list;}public String getInjectedHeader() {return getString(R.string.pref_key__inject_to_head, rstr(R.string.inject_to_head_default));}public String getInjectedBody() {return getString(R.string.pref_key__inject_to_body, """");}public boolean isEditorHistoryEnabled() {return true;//getBool(R.string.pref_key__editor_history_enabled3, true);}public boolean isTodoTxtAlternativeNaming() {return getBool(R.string.pref_key__todotxt__alternative_naming_context_project, true);}public int getEditorBasicColorSchemeId() {return 0;}public int getEditorForegroundColor() {/*switch (getEditorBasicColorSchemeId()) {default:case 0:return rcolor(darkMode ? R.color.white : R.color.dark_grey);case 1:return rcolor(darkMode ? R.color.white : R.color.black);case 2:return rcolor(R.color.solarized_fg);case 3:return rcolor(R.color.solarized_fg);}*/boolean darkMode = isDarkThemeEnabled();int defval = rcolor(darkMode ? R.color.white : R.color.dark_grey);return getInt(darkMode ? R.string.pref_key__editor_basic_color_scheme__fg_dark : R.string.pref_key__editor_basic_color_scheme__fg_light, defval);}public int getEditorBackgroundColor() {/*switch (getEditorBasicColorSchemeId()) {default:case 0:return rcolor(darkMode ? R.color.dark_grey : R.color.light__background);case 1:return rcolor(darkMode ? R.color.black : R.color.white);case 2:return rcolor(darkMode ? R.color.solarized_bg_dark : R.color.solarized_bg_light);case 3:return rcolor(darkMode ? R.color.solarized_bg_dark : R.color.solarized_bg_light);}*/boolean darkMode = isDarkThemeEnabled();int defval = rcolor(darkMode ? R.color.dark_grey : R.color.light__background);return getInt(darkMode ? R.string.pref_key__editor_basic_color_scheme__bg_dark : R.string.pref_key__editor_basic_color_scheme__bg_light, defval);}public int getEditorTextactionBarColor() {return rcolor(isDarkThemeEnabled() ? R.color.dark__background_2 : R.color.lighter_grey);}public void setEditorBasicColor(boolean forDarkMode, @ColorRes int fgColor, @ColorRes int bgColor) {int resIdFg = forDarkMode ? R.string.pref_key__editor_basic_color_scheme__fg_dark : R.string.pref_key__editor_basic_color_scheme__fg_light;int resIdBg = forDarkMode ? R.string.pref_key__editor_basic_color_scheme__bg_dark : R.string.pref_key__editor_basic_color_scheme__bg_light;setInt(resIdFg, rcolor(fgColor));setInt(resIdBg, rcolor(bgColor));}public boolean isMultiWindowEnabled() {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {return getBool(R.string.pref_key__is_multi_window_enabled, true);} else {return false;}}public @IdResint getAppStartupTab() {int i = getIntOfStringPref(R.string.pref_key__app_start_tab_v2, R.id.nav_notebook);switch (i) {case 1:return R.id.nav_todo;case 2:return R.id.nav_quicknote;}return R.id.nav_notebook;}public boolean isSwipeToChangeMode() {return getBool(R.string.pref_key__swipe_to_change_mode, false);}public void setFilesystemListFolderFirst(boolean checked) {setBool(R.string.pref_key__filesystem_folder_first, checked);}public boolean isFilesystemListFolderFirst() {return getBool(R.string.pref_key__filesystem_folder_first, true);}public String getNavigationBarColor() {return getString(R.string.pref_key__navigationbar_color, ""#000000"");}public @IdResInteger getAppStartupFolderMenuId() {switch (getString(R.string.pref_key__app_start_folder, ""notebook"")) {case ""favourites"":return R.id.action_go_to_favourite_files;case ""internal_storage"":return R.id.action_go_to_storage;case ""appdata_public"":return R.id.action_go_to_appdata_public;case ""appdata_private"":return R.id.action_go_to_appdata_private;case ""popular_documents"":return R.id.action_go_to_popular_files;case ""recently_viewed_documents"":return R.id.action_go_to_recent_files;}return R.id.action_go_to_home;}public File getFolderToLoadByMenuId(int itemId) {ContextUtils contextUtils = new ContextUtils(_context);List<Pair<File, String>> appDataPublicDirs = contextUtils.getAppDataPublicDirs(false, true, false);switch (itemId) {case R.id.action_go_to_home: {return getNotebookDirectory();}case R.id.action_go_to_popular_files: {return FilesystemViewerAdapter.VIRTUAL_STORAGE_POPULAR;}case R.id.action_go_to_recent_files: {return FilesystemViewerAdapter.VIRTUAL_STORAGE_RECENTS;}case R.id.action_go_to_favourite_files: {return FilesystemViewerAdapter.VIRTUAL_STORAGE_FAVOURITE;}case R.id.action_go_to_appdata_private: {return contextUtils.getAppDataPrivateDir();}case R.id.action_go_to_storage: {return Environment.getExternalStorageDirectory();}case R.id.action_go_to_appdata_sdcard_1: {if (appDataPublicDirs.size() > 0) {return appDataPublicDirs.get(0).first;}return Environment.getExternalStorageDirectory();}case R.id.action_go_to_appdata_sdcard_2: {if (appDataPublicDirs.size() > 1) {return appDataPublicDirs.get(1).first;}return Environment.getExternalStorageDirectory();}case R.id.action_go_to_appdata_public: {appDataPublicDirs = contextUtils.getAppDataPublicDirs(true, false, false);if (appDataPublicDirs.size() > 0) {return appDataPublicDirs.get(0).first;}return contextUtils.getAppDataPrivateDir();}}return getNotebookDirectory();}public void setShowDotFiles(boolean value) {setBool(R.string.pref_key__show_dot_files, value);}public boolean isShowDotFiles() {return getBool(R.string.pref_key__show_dot_files, false);}public int getTabWidth() {return getInt(R.string.pref_key__tab_width_v2, 1);}public boolean listFileInRecents(File file) {return getBool(file.getAbsolutePath() + ""_list_in_recents"", true);}public void setListFileInRecents(File file, boolean value) {setBool(file.getAbsolutePath() + ""_list_in_recents"", value);if (!value) {ArrayList<String> recent = getRecentDocuments();if (recent.contains(file.getAbsolutePath())) {recent.remove(file.getAbsolutePath());setRecentDocuments(recent);}}}/*public ArrayList<String> getFilesRatedWith(int rating) {return getFilesTaggedWith(""rating_"" + Integer.toString(rating));}public ArrayList<String> getFilesTaggedWith(String tag) {return getStringList(""files_tagged_with"" + tag, _prefHistory);}*/public int getRating(File file) {return getInt(file.getAbsolutePath() + ""_rating"", 0);}public void setRating(File file, int value) {setInt(file.getAbsolutePath() + ""_rating"", value);}public boolean isEditorLineBreakingEnabled() {return getBool(R.string.pref_key__editor_enable_line_breaking, true);}private List<String> extSettingCache;public synchronized boolean isExtOpenWithThisApp(String ext) {if (ext.equals("""")) {ext = ""None"";}if (extSettingCache == null) {String pref = getString(R.string.pref_key__exts_to_always_open_in_this_app, """");extSettingCache = Arrays.asList(pref.toLowerCase().replace("",,"", "",None,"").replace("" "", """").split("",""));}return extSettingCache.contains(ext) || extSettingCache.contains("".*"");}public boolean isDebugLogEnabled() {return getBool(R.string.pref_key__is_debug_log_enabled, BuildConfig.IS_TEST_BUILD);}public boolean isExperimentalFeaturesEnabled() {return getBool(R.string.pref_key__is_enable_experimental_features, BuildConfig.IS_TEST_BUILD);}public boolean isMarkdownBiggerHeadings() {return getBool(R.string.pref_key__editor_markdown_bigger_headings_2, false);}public String getViewModeLinkColor() {return ContextUtils.colorToHexString(getInt(R.string.pref_key__view_mode_link_color, Color.parseColor(""#388E3C"")));}public String getUnorderedListCharacter() {return getString(R.string.pref_key__editor_unordered_list_character, ""-"");}public boolean isTodoNewTaskWithHuuidEnabled() {return getBool(R.string.pref_key__todotxt__start_new_tasks_with_huuid_v3, false);}public String getHuuidDeviceId() {String deviceid = getString(""huuid_deviceid"", null);if (deviceid == null) {deviceid = String.format(""%08x"", new Random().nextInt()).substring(0, 4);setString(""huuid_deviceid"", deviceid);}return deviceid;}public boolean hasPasswordBeenSetOnce() {return getBool(R.string.pref_key__default_encryption_password_set_once, false);}public void setPasswordHasBeenSetOnce(boolean b) {setBool(R.string.pref_key__default_encryption_password_set_once, b);}public boolean getNewFileDialogLastUsedEncryption() {return getBool(R.string.pref_key__new_file_dialog_lastused_encryption, false);}public void setNewFileDialogLastUsedEncryption(boolean b) {setBool(R.string.pref_key__new_file_dialog_lastused_encryption, b);}public String getNewFileDialogLastUsedExtension() {return getString(R.string.pref_key__new_file_dialog_lastused_extension, "".md"");}public void setNewFileDialogLastUsedExtension(String v) {setString(R.string.pref_key__new_file_dialog_lastused_extension, v);}public int getNewFileDialogLastUsedType() {return getInt(R.string.pref_key__new_file_dialog_lastused_type, 0);}public void setNewFileDialogLastUsedType(int i) {setInt(R.string.pref_key__new_file_dialog_lastused_type, i);}}",markor/app/src/main/java/net/gsantner/markor/util/AppSettings.java
53,"<?xml version=""1.0"" encoding=""utf-8""?><!--A project by Gregor Santner (https://gsantner.net)To the extent possible under law, the person who associated CC0 withthis file has waived all copyright and related or neighboring rightsto the public domain.You should have received a copy of the CC0 legalcode along with thiswork. If not, see <https://creativecommons.org/publicdomain/zero/1.0/>.--><resources><string name=""app_name_real"">Markor</string><string name=""app_name"" translatable=""false"">@string/app_name_real</string><string name=""app_license_name"" translatable=""false"">Apache 2.0</string><string name=""app_community_url"" translatable=""false"">https://matrix.to/#/#markor:matrix.org</string><string name=""app_bugreport_url"" translatable=""false"">https://github.com/gsantner/markor/issues</string><string name=""app_translate_url"" translatable=""false"">https://crowdin.com/project/markor/invite</string><string name=""app_web_url"" translatable=""false"">https://gsantner.net/project/markor.html?source=inapp</string><string name=""sync_client_support_issue_url"" translatable=""false"">https://github.com/gsantner/markor/issues/197</string><string name=""app_source_code_url"" translatable=""false"">https://github.com/gsantner/markor</string><string name=""app_donate_url"" translatable=""false""><![CDATA[https://gsantner.net/page/supportme.html?project=markor&source=inapp_supdon]]></string><string name=""app_contribution_info_url"" translatable=""false"">https://github.com/gsantner/markor/blob/master/README.md#contributions</string><string name=""more_info_on_how_to_donate_or_otherwise_support_this_project"" translatable=""false"">@string/more_info_on_how_to_donate_or_otherwise_support_this_project_text</string><string name=""donate_"" translatable=""false"">@string/donate</string><string name=""app_contact_email_reverse"" translatable=""false"">gro.xobliam@kcabdeef+rentnasg</string><string name=""huuid"">hUUID</string><string name=""checkmark_symbol"" translatable=""false"">\u2301</string><string name=""bookmark_symbol"" translatable=""false"">\u2605</string><string name=""lightning_symbol"" translatable=""false"">\u2714</string><string name=""plus"" translatable=""false"">+</string><string name=""share_html__mime_html"" translatable=""false"">HTML</string><string name=""pdf"" translatable=""false"">PDF</string><string name=""markdown"" translatable=""false"">Markdown</string><string name=""community"" translatable=""false"">Community</string><string name=""default_font_family"" translatable=""false"">sans-serif-regular</string><string name=""quicknote"" translatable=""false"">QuickNote</string><string name=""todo"" translatable=""false"">To-Do</string><string name=""todo_txt"" translatable=""false"">todo.txt</string><string name=""quicknote_default_filename"" translatable=""false"">QuickNote.md</string><string name=""todo_default_filename"" translatable=""false"">todo.txt</string><string name=""web_browser"" translatable=""false"">Web browser</string><string name=""app_drawer_launcher_special_files_description"" translatable=""false"">App drawer launchers - To-Do, QuickNote</string><string name=""category_to_context_project_to_tag"" translatable=""false"">%1$s -> %2$s, %3$s -> %4$s</string><string name=""katex_latex"" translatable=""false"">KaTex (LaTex)\n$ a^2 + b^2 = c^2 $</string><string name=""app_theme_light"" translatable=""false"">light</string><string name=""app_theme_dark"" translatable=""false"">dark</string><string name=""app_theme_auto"" translatable=""false"">auto</string><string name=""editor_basic_color_scheme_markor"" translatable=""false"">Markor</string><string name=""editor_basic_color_scheme_black_or_white"" translatable=""false"">Black or White</string><string name=""editor_basic_color_scheme_amoled"" translatable=""false"">AMOLED</string><string name=""editor_basic_color_scheme_solarized"" translatable=""false"">Solarized</string><string name=""editor_basic_color_scheme_gruvbox"" translatable=""false"">Gruvbox</string><string name=""editor_basic_color_scheme_greenscale"" translatable=""false"">Greenscale</string><string name=""editor_basic_color_scheme_sepia"" translatable=""false"">Sepia</string><string name=""auto"" translatable=""false"">Auto</string><string name=""hexcode"" translatable=""false"">Hexcode</string><string name=""markup_formats_supported_list"" translatable=""false"">Markdown, todo.txt, Plaintext</string><string name=""sync_to_local_folder_notice_paths"" translatable=""false""><![CDATA[<b>Dropbox:</b> Android/data/com.dropbox.android/files/u123456/scratch/\n<b>Own/NextCloud:</b> %s]]></string><!-- About Screen --><string name=""copyright_license_text_official"" translatable=""false""><![CDATA[### Copyright © 2017-2019**Gregor Santner**\n**Official project sources:**[Website](https://gsantner.net/index.html?source=inapp_license_official_project_source) | [Source code](https://github.com/gsantner/markor) | [F-Droid](https://f-droid.org/repository/browse/?fdid=net.gsantner.markor) | [Google Play](https://play.google.com/store/apps/details?id=net.gsantner.markor)]]></string><string name=""inject_to_head"" translatable=""false"">Inject -> head</string><string name=""inject_to_body"" translatable=""false"">Inject -> body</string><string name=""js_css"" translatable=""false""><![CDATA[html: <head>CSS, JavaScript</head>]]></string><string name=""inject_to_head_default"" translatable=""false""><![CDATA[<style>\nhtml,body {\n  /*font-family: sans-serif-condensed;*/\n  /*font-size: 80%;*/\n}\n</style>\n\n\n<script type=\""text/javascript\"">\nfunction onPageLoaded(){\n\n/*if (\'{{ post.text_converter_name }}\' == \'MarkdownTextConverter\') {\n  window.scrollTo(0,document.body.scrollHeight);\n}*/\n\n}\n</script>]]></string><plurals name=""item_selected"" translatable=""false""><item quantity=""one"" translatable=""false"">@string/one_item_selected</item><item quantity=""other"" translatable=""false"">@string/items_selected_witharg</item></plurals><plurals name=""documents"" translatable=""false""><item quantity=""one"" translatable=""false"">@string/document</item><item quantity=""other"" translatable=""false"">@string/documents</item></plurals><string name=""tag"" translatable=""false"">Tag</string><string name=""tags"" translatable=""false"">Tags</string><string name=""dotfiles"" translatable=""false"">.dotfiles</string><string name=""tagging"" translatable=""false"">Tagging</string><!--Preference keys--><string name=""pref_key__markdown__hl_delay_v2"" translatable=""false"">pref_key__markdown__hl_delay_v2</string><string name=""pref_key__quicknote_filepath"" translatable=""false"">pref_key__quicknote_filepath</string><string name=""pref_key__markdown__highlight_lineending_two_or_more_space"" translatable=""false"">pref_key__markdown__highlight_lineending_two_or_more_space</string><string name=""pref_key__markdown__monospace_some_parts"" translatable=""false"">pref_key__markdown__monospace_some_parts</string><string name=""pref_key__markdown__disable_code_block_highlight"" translatable=""false"">pref_key__markdown__disable_code_block_highlight</string><string name=""pref_key__markdown__auto_renumber_ordered_list"" translatable=""false"">pref_key__markdown__auto_renumber_ordered_list</string><string name=""pref_key__markdown__reorder_actions"" translatable=""false"">pref_key__markdown__reorder_actions</string><string name=""pref_key__todotxt__reorder_actions"" translatable=""false"">pref_key__todotxt__reorder_actions</string><string name=""pref_key__plaintext__reorder_actions"" translatable=""false"">pref_key__plaintext__reorder_actions</string><string name=""pref_key__markdown__action_keys"" translatable=""false"">pref_key__markdown__action_keys</string><string name=""pref_key__todotxt__action_keys"" translatable=""false"">pref_key__todotxt__action_keys</string><string name=""pref_key__plaintext__action_keys"" translatable=""false"">pref_key__plaintext__action_keys</string><string name=""pref_key__todotxt__hl_delay"" translatable=""false"">pref_key__todotxt__hl_delay</string><string name=""pref_key__todo_filepath"" translatable=""false"">pref_key__todo_filepath</string><string name=""pref_key__todotxt__add_completion_date_for_todos"" translatable=""false"">pref_key__todotxt__add_completion_date_for_todos</string><string name=""pref_key__todotxt__start_new_tasks_with_todays_date"" translatable=""false"">pref_key__todotxt__start_new_tasks_with_todays_date</string><string name=""pref_key__todotxt__append_contexts_and_projects_on_end_of_task"" translatable=""false"">pref_key__todotxt__append_contexts_and_projects_on_end_of_task</string><string name=""pref_key__todotxt__last_used_archive_filename"" translatable=""false"">pref_key__todotxt__last_used_archive_filename</string><string name=""pref_key__todotxt__alternative_naming_context_project"" translatable=""false"">pref_key__todotxt__alternative_naming_context_project</string><string name=""pref_key__is_preview_first"" translatable=""false"">pref_key__is_preview_first</string><string name=""pref_key__is_render_rtl"" translatable=""false"">pref_key__is_render_rtl</string><string name=""pref_key__is_highlighting_activated"" translatable=""false"">pref_key__is_highlighting_activated</string><string name=""pref_key__load_last_directory_at_startup"" translatable=""false"">pref_key__load_last_directory_at_startup</string><string name=""pref_key__notebook_directory"" translatable=""false"">pref_key__notebook_directory</string><string name=""pref_key__last_opened_directory"" translatable=""false"">pref_key__last_opened_directory</string><string name=""pref_key__font_family"" translatable=""false"">pref_key__font_family</string><string name=""pref_key__editor_font_size"" translatable=""false"">pref_key__editor_font_size</string><string name=""pref_key__app_theme"" translatable=""false"">pref_key__app_theme</string><string name=""pref_key__is_editor_statusbar_hidden"" translatable=""false"">pref_key__is_editor_statusbar_hidden</string><string name=""pref_key__is_overview_statusbar_hidden"" translatable=""false"">pref_key__is_overview_statusbar_hidden</string><string name=""pref_key__language"" translatable=""false"">pref_key__language</string><string name=""pref_key__is_main_recreate_required"" translatable=""false"">pref_key__is_main_recreate_required</string><string name=""pref_key__sort_method"" translatable=""false"">pref_key__sort_method</string><string name=""pref_key__sort_reverse"" translatable=""false"">pref_key__sort_reverse</string><string name=""pref_key__is_highlighting_for_hexcolor_activated"" translatable=""false"">pref_key__is_highlighting_for_hexcolor_activated</string><string name=""pref_key__app_first_start_current_version"" translatable=""false"">pref_key__app_first_start_current_version</string><string name=""pref_key__editor_line_spacing"" translatable=""false"">pref_key__editor_line_spacing</string><string name=""pref_key__editor_start_editing_on_bottom"" translatable=""false"">pref_key__editor_start_editing_on_bottom</string><string name=""pref_key__editor_start_editing_in_center"" translatable=""false"">pref_key__editor_start_editing_in_center</string><string name=""pref_key__share_into__quicknote"" translatable=""false"">pref_key__share_into__quicknote</string><string name=""pref_key__share_into__todo"" translatable=""false"">pref_key__share_into__todo</string><string name=""pref_key__share_into__clipboard"" translatable=""false"">pref_key__share_into__clipboard</string><string name=""pref_key__share_into__existing_document"" translatable=""false"">pref_key__share_into__existing_document</string><string name=""pref_key__share_into__create_document"" translatable=""false"">pref_key__share_into__create_document</string><string name=""pref_key__share_into__reshare"" translatable=""false"">pref_key__share_into__reshare</string><string name=""pref_key__share_into__calendar_event"" translatable=""false"">pref_key__share_into__calendar_event</string><string name=""pref_key__more_info__settings"" translatable=""false"">pref_key__more_info__settings</string><string name=""pref_key__more_info__source_code"" translatable=""false"">pref_key__more_info__source_code</string><string name=""pref_key__more_info__project_license"" translatable=""false"">pref_key__more_info__project_license</string><string name=""pref_key__more_info__open_source_licenses"" translatable=""false"">pref_key__more_info__open_source_licenses</string><string name=""pref_key__more_info__bug_reports"" translatable=""false"">pref_key__more_info__bug_reports</string><string name=""pref_key__more_info__help"" translatable=""false"">pref_key__more_info__help</string><string name=""pref_key__more_info__rate_app"" translatable=""false"">pref_key__more_info__rate_app</string><string name=""pref_key__more_info__translate"" translatable=""false"">pref_key__more_info__translate</string><string name=""pref_key__more_info__join_community"" translatable=""false"">pref_key__more_info__join_community</string><string name=""pref_key__more_info__app"" translatable=""false"">pref_key__more_info__app</string><string name=""pref_key__more_info__donate"" translatable=""false"">pref_key__more_info__donate</string><string name=""pref_key__more_info__project_contribution_info"" translatable=""false"">pref_key__more_info__project_contribution_info</string><string name=""pref_key__more_info__project_community"" translatable=""false"">pref_key__more_info__project_community</string><string name=""pref_key__more_info__project_team"" translatable=""false"">pref_key__more_info__project_team</string><string name=""pref_key__more_info__contributors_public_info"" translatable=""false"">pref_key__more_info__contributors_public_info</string><string name=""pref_key__more_info__copy_build_information"" translatable=""false"">pref_key__more_info__copy_build_information</string><string name=""pref_key__editor_textaction_bar_item_padding"" translatable=""false"">pref_key__editor_textaction_bar_item_padding</string><string name=""pref_key__editor_disable_spelling_red_underline"" translatable=""false"">pref_key__editor_disable_spelling_red_underline</string><string name=""pref_key__editor_markdown_bigger_headings_2"" translatable=""false"">pref_key__editor_markdown_bigger_headings_2</string><string name=""pref_key__editor_unordered_list_character"" translatable=""false"">pref_key__editor_unordered_list_character</string><string name=""pref_key__recent_documents"" translatable=""false"">pref_key__recent_documents</string><string name=""pref_key__popular_documents"" translatable=""false"">pref_key__popular_documents</string><string name=""pref_key__favourite_files"" translatable=""false"">pref_key__favourite_files</string><string name=""pref_key__share_into__open_in_browser"" translatable=""false"">pref_key__share_into__open_in_browser</string><string name=""pref_key__inject_to_head"" translatable=""false"">pref_key__inject_to_head</string><string name=""pref_key__inject_to_body"" translatable=""false"">pref_key__inject_to_body</string><string name=""pref_key__markdown_render_math"" translatable=""false"">pref_key__markdown_render_math</string><string name=""pref_key__markdown_show_toc"" translatable=""false"">pref_key__markdown_show_toc</string><string name=""pref_key__is_launcher_for_special_files_enabled"" translatable=""false"">pref_key__is_launcher_for_special_files_enabled</string><string name=""pref_key__editor_basic_color_scheme__bg_light"" translatable=""false"">pref_key__editor_basic_color_scheme__bg_light</string><string name=""pref_key__editor_basic_color_scheme__fg_light"" translatable=""false"">pref_key__editor_basic_color_scheme__fg_light</string><string name=""pref_key__editor_basic_color_scheme__bg_dark"" translatable=""false"">pref_key__editor_basic_color_scheme__bg_dark</string><string name=""pref_key__editor_basic_color_scheme__fg_dark"" translatable=""false"">pref_key__editor_basic_color_scheme__fg_dark</string><string name=""pref_key__editor_basic_color_scheme_solarized"" translatable=""false"">pref_key__editor_basic_color_scheme_solarized</string><string name=""pref_key__editor_basic_color_scheme_blackorwhite"" translatable=""false"">pref_key__editor_basic_color_scheme_blackorwhite</string><string name=""pref_key__editor_basic_color_scheme_amoled"" translatable=""false"">pref_key__editor_basic_color_scheme_amoled</string><string name=""pref_key__editor_basic_color_scheme_markor"" translatable=""false"">pref_key__editor_basic_color_scheme_markor</string><string name=""pref_key__editor_basic_color_scheme_gruvbox"" translatable=""false"">pref_key__editor_basic_color_scheme_gruvbox</string><string name=""pref_key__editor_basic_color_scheme_greenscale"" translatable=""false"">pref_key__editor_basic_color_scheme_greenscale</string><string name=""pref_key__editor_basic_color_scheme_sepia"" translatable=""false"">pref_key__editor_basic_color_scheme_sepia</string><string name=""pref_key__is_keep_screen_on"" translatable=""false"">pref_key__keep_screen_on</string><string name=""tmaid_common_delete_lines"" translatable=""false"">tmaid_common_delete_lines</string><string name=""tmaid_common_attach_something"" translatable=""false"">tmaid_common_attach_something</string><string name=""tmaid_common_unordered_list_char"" translatable=""false"">tmaid_common_unordered_list_char</string><string name=""tmaid_common_ordered_list_number"" translatable=""false"">tmaid_common_ordered_list_number</string><string name=""tmaid_common_checkbox_list"" translatable=""false"">tmaid_common_checkbox_list</string><string name=""tmaid_common_special_key"" translatable=""false"">tmaid_common_special_key</string><string name=""tmaid_common_open_link_browser"" translatable=""false"">tmaid_common_open_link_browser</string><string name=""tmaid_common_color_picker"" translatable=""false"">tmaid_common_color_picker</string><string name=""tmaid_common_time"" translatable=""false"">tmaid_common_time</string><string name=""tmaid_common_jump_to_bottom"" translatable=""false"">tmaid_common_jump_to_bottom</string><string name=""tmaid_common_search_in_content_of_current_file"" translatable=""false"">tmaid_common_search_in_content_of_current_file</string><string name=""tmaid_common_accordion"" translatable=""false"">tmaid_common_accordion</string><string name=""tmaid_common_indent"" translatable=""false"">tmaid_common_indent</string><string name=""tmaid_common_deindent"" translatable=""false"">tmaid_common_deindent</string><string name=""tmaid_common_toolbar_title_clicked_edit_action"">tmaid_common_toolbar_title_clicked_edit_action</string><string name=""tmaid_markdown_quote"" translatable=""false"">tmaid_markdown_quote</string><string name=""tmaid_markdown_h1"" translatable=""false"">tmaid_markdown_h1</string><string name=""tmaid_markdown_h2"" translatable=""false"">tmaid_markdown_h2</string><string name=""tmaid_markdown_h3"" translatable=""false"">tmaid_markdown_h3</string><string name=""tmaid_markdown_bold"" translatable=""false"">tmaid_markdown_bold</string><string name=""tmaid_markdown_italic"" translatable=""false"">tmaid_markdown_italic</string><string name=""tmaid_markdown_strikeout"" translatable=""false"">tmaid_markdown_strikeout</string><string name=""tmaid_markdown_code_inline"" translatable=""false"">tmaid_markdown_code_inline</string><string name=""tmaid_markdown_horizontal_line"" translatable=""false"">tmaid_markdown_horizontal_line</string><string name=""tmaid_markdown_insert_image"" translatable=""false"">tmaid_markdown_insert_image</string><string name=""tmaid_markdown_insert_link"" translatable=""false"">tmaid_markdown_insert_link</string><string name=""tmaid_markdown_table_insert_columns"" translatable=""false"">tmaid_markdown_table_insert_columns</string><string name=""tmaid_todotxt_toggle_done"" translatable=""false"">tmaid_todotxt_toggle_done</string><string name=""tmaid_todotxt_add_context"" translatable=""false"">tmaid_todotxt_add_context</string><string name=""tmaid_todotxt_add_project"" translatable=""false"">tmaid_todotxt_add_project</string><string name=""tmaid_todotxt_priority"" translatable=""false"">tmaid_todotxt_priority</string><string name=""tmaid_todotxt_archive_done_tasks"" translatable=""false"">tmaid_todotxt_archive_done_tasks</string><string name=""tmaid_todotxt_current_date"" translatable=""false"">tmaid_todotxt_current_date</string><string name=""tmaid_todotxt_sort_todo"" translatable=""false"">tmaid_todotxt_sort_todo</string><string name=""jekyll_post"" translatable=""false"">Jekyll Post</string><string name=""zim_wiki"" translatable=""false"">Zim Wiki</string><string name=""pref_key__is_multi_window_enabled"" translatable=""false"">pref_key__is_multi_window_enabled</string><string name=""pref_key__is_enable_experimental_features"" translatable=""false"">pref_key__is_enable_experimental_features</string><string name=""pref_key__app_start_tab_v2"" translatable=""false"">pref_key__app_start_tab_v2</string><string name=""pref_key__app_start_folder"" translatable=""false"">pref_key__app_start_folder</string><string name=""pref_key__swipe_to_change_mode"" translatable=""false"">pref_key__swipe_to_change_mode</string><string name=""pref_key__filesystem_folder_first"" translatable=""false"">pref_key__filesystem_folder_first</string><string name=""pref_key__show_dot_files"" translatable=""false"">pref_key__show_dot_files</string><string name=""pref_key__tab_width_v2"" translatable=""false"">pref_key__tab_width_v2</string><string name=""pref_key__editor_enable_line_breaking"" translatable=""false"">pref_key__editor_enable_line_breaking</string><string name=""pref_key__exts_to_always_open_in_this_app"" translatable=""false"">pref_key__exts_to_always_open_in_this_app</string><string name=""pref_key__is_debug_log_enabled"" translatable=""false"">pref_key__is_debug_log_enabled</string><string name=""pref_key__view_font_size"" translatable=""false"">pref_key__view_font_size</string><string name=""pref_key__view_mode_link_color"" translatable=""false"">pref_key__view_mode_link_color</string><string name=""pref_key__todotxt__start_new_tasks_with_huuid_v3"" translatable=""false"">pref_key__todotxt__start_new_tasks_with_huuid_v3</string><string name=""features"" translatable=""false"">Features</string><string name=""file_template__md_markor_markdown_reference"" translatable=""false"">markor-markdown-reference.md</string><string name=""file_template__md_jekyll_post"" translatable=""false"">2029-01-01-jekyll-post.md</string><string name=""file_template__md_cooking_recipe"" translatable=""false"">cooking-recipe.md</string><string name=""file_template__txt_todo_sample"" translatable=""false"">todo.example.txt</string><string name=""file_template__txt_zim_wiki"" translatable=""false"">zim-wiki.txt</string><string name=""file_template__md_hugo_post_front_matter"" translatable=""false"">hugo-post-front-matter.md</string><string name=""file_template__md_presentation_beamer"" translatable=""false"">presentation-beamer.md</string><string name=""key_value"" translatable=""false"">Key - Value</string><string name=""ohm"" translatable=""false"">Ohm (Ω)</string><string name=""debug"" translatable=""false"">Debug</string><string name=""text"" translatable=""false"">Text</string><string name=""inject"" translatable=""false"">Inject</string><string name=""char_punctation_mark_arrows"" translatable=""false"">Punctuation mark (»«)</string><string name=""indent"" translatable=""false"">Indent</string><string name=""deindent"" translatable=""false"">De-indent</string><string name=""assets"" translatable=""false"">Assets</string><string name=""audio"" translatable=""false"">Audio</string><string name=""continued_overline"" translatable=""false"">Continued overline (‾‾‾‾)</string><string name=""shrug"" translatable=""false"">Shrug (¯\_(ツ)_/¯)</string><string name=""accordion"" translatable=""false"">Accordion</string><string name=""pref_key__default_encryption_password"" translatable=""false"">pref_key__default_encryption_password</string><string name=""empty_string"" translatable=""false""/><string name=""pref_key__default_encryption_password_set_once"" translatable=""false"">pref_key__default_encryption_password_set_once</string><string name=""pref_key__new_file_dialog_lastused_encryption"" translatable=""false"">pref_key__new_file_dialog_lastused_encryption</string><string name=""pref_key__new_file_dialog_lastused_extension"" translatable=""false"">pref_key__new_file_dialog_lastused_extension</string><string name=""pref_key__new_file_dialog_lastused_type"" translatable=""false"">pref_key__new_file_dialog_lastused_type</string><string name=""select_current_line"" translatable=""false"">Select current line(s)</string></resources>",markor/app/src/main/res/values/string-not_translatable.xml
8,"package de.koelle.christian.common.widget.tab;import android.annotation.SuppressLint;import android.content.Context;import android.support.annotation.NonNull;import android.support.v4.view.ViewPager;import android.util.AttributeSet;import android.view.KeyEvent;import android.view.MotionEvent;public class BlockableViewPager extends ViewPager {private boolean enabled;public BlockableViewPager(Context context, AttributeSet attrs) {super(context, attrs);this.enabled = true;}@SuppressLint(""ClickableViewAccessibility"")@Overridepublic boolean onTouchEvent(MotionEvent event) {return this.enabled && super.onTouchEvent(event);}@Overridepublic boolean onInterceptTouchEvent(MotionEvent event) {return this.enabled && super.onInterceptTouchEvent(event);}@Overridepublic boolean executeKeyEvent(@NonNull KeyEvent event) {return this.enabled && super.executeKeyEvent(event);}public void setSwipeEnabled(boolean enabled) {this.enabled = enabled;}}",trickytripper/app/src/main/java/de/koelle/christian/common/widget/tab/BlockableViewPager.java
8,"package de.koelle.christian.trickytripper;import android.app.Activity;import android.content.Intent;import android.content.res.Configuration;import android.graphics.Typeface;import android.os.Bundle;import android.support.v4.content.ContextCompat;import android.support.v4.view.GravityCompat;import android.support.v4.view.PagerAdapter;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBar;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.support.v7.view.ActionMode;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import java.text.Collator;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import de.koelle.christian.common.changelog.ChangeLog;import de.koelle.christian.common.options.OptionConstraints;import de.koelle.christian.common.options.OptionConstraintsInflater;import de.koelle.christian.common.utils.CurrencyUtil;import de.koelle.christian.common.widget.tab.BlockableViewPager;import de.koelle.christian.trickytripper.activitysupport.MainPagerAdapter;import de.koelle.christian.trickytripper.constants.Rc;import de.koelle.christian.trickytripper.controller.TripController;import de.koelle.christian.trickytripper.dialogs.DeleteDialogFragment;import de.koelle.christian.trickytripper.model.Trip;import de.koelle.christian.trickytripper.model.TripSummary;import de.koelle.christian.trickytripper.model.modelAdapter.TripSummarySymbolResolvingDelegator;public class TrickyTripperActivity extends AppCompatActivity implements DeleteDialogFragment.DeleteConfirmationCallback {private static final String SELECTED_TAB_INDEX = ""tabIndex"";private static final String DIALOG_PARAM_TRIP_SUMMARY = ""dialogParamTripSummary"";private BlockableViewPager mViewPager;private DrawerLayout mDrawerLayout;private ListView mDrawerList;private ActionBarDrawerToggle mDrawerToggle;private ArrayAdapter<TripSummary> mDrawerListAdapter;private Comparator<TripSummary> mListComparator;private CharSequence mDrawerTitle;private long previouslySelectedTripId;private MyActionModeCallback mActionModeCallback = new MyActionModeCallback();/*This action mode might also be set by the nested fragments.*/private ActionMode mActionMode;@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.tricky_tripper_main_view);ChangeLog changeLog = new ChangeLog(this);if (changeLog.firstRun()) {changeLog.getLogDialog().show();}mDrawerTitle = getResources().getString(R.string.trip_manage_view_heading);mDrawerLayout = findViewById(R.id.drawer_layout);mDrawerList =  findViewById(R.id.drawer_drawer_list_view_trips);mViewPager = findViewById(R.id.drawer_content_pager);updatePagerAdapter();mDrawerToggle = new MyActionBarDrawerToggle();mDrawerLayout.addDrawerListener(mDrawerToggle);final ActionBar actionBar = getSupportActionBar();actionBar.setDisplayShowTitleEnabled(true);// This line has to be prior to the next one.actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setHomeButtonEnabled(true);setTripNameToHeader();int index = 0; // first one by defaultif (savedInstanceState != null) {index = savedInstanceState.getInt(SELECTED_TAB_INDEX);}mViewPager.setCurrentItem(index);TrickyTripperApp app = getApp();final Collator c = app.getMiscController().getDefaultStringCollator();mListComparator = new Comparator<TripSummary>() {public int compare(TripSummary object1, TripSummary object2) {return c.compare(object1.getName(), object2.getName());}};iniDrawerListView(mDrawerList);addDrawerListClickListener(mDrawerList, app);}private void iniDrawerListView(ListView listView) {mDrawerListAdapter = new ArrayAdapter<TripSummary>(this,android.R.layout.simple_list_item_1,new ArrayList<TripSummary>()) {@Overridepublic View getView(int position, View convertView, ViewGroup parent) {/* Display currency code only when not in list view. */TextView result = (TextView) super.getView(position,convertView, parent);TripSummary row = this.getItem(position);int color;int typefaceStyle;if (row.getId() == getApp().getTripController().getTripLoaded().getId()) {color = getResources().getColor(R.color.main);typefaceStyle = Typeface.BOLD;} else {color = ContextCompat.getColor(getContext(), android.R.color.tertiary_text_light);typefaceStyle = Typeface.NORMAL;}result.setText(row.toString());result.setTextColor(color);result.setTypeface(null, typefaceStyle);return result;}};listView.setAdapter(mDrawerListAdapter);listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);}private void updatePagerAdapter() {// MainPagerAdapter defines the tab activities and the tab order.PagerAdapter mPagerAdapter = new MainPagerAdapter(getSupportFragmentManager(), this);mViewPager.setAdapter(mPagerAdapter);}private void addDrawerListClickListener(final ListView listView,final TrickyTripperApp app) {listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {public void onItemClick(AdapterView<?> arg0, View arg1,int position, long id) {if (mActionMode != null) {return;}mDrawerList.setItemChecked(position, true);TripSummary selectedTripSummary = mDrawerListAdapter.getItem(position);app.getTripController().loadTrip(selectedTripSummary);mDrawerLayout.closeDrawer(GravityCompat.START);setTripNameToHeader();if (selectedTripSummary.getId() != previouslySelectedTripId) {updatePagerAdapter();}}});listView.setLongClickable(true);listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {@Overridepublic boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {if (mActionMode != null) {return false;}TripSummary selectedTrip = mDrawerListAdapter.getItem(position);mActionModeCallback.setSelectedTrip(selectedTrip);mActionMode = TrickyTripperActivity.this.startSupportActionMode(mActionModeCallback);mActionMode.setTitle(selectedTrip.toString());view.setSelected(true);return true;}});}@Overrideprotected void onPostCreate(Bundle savedInstanceState) {super.onPostCreate(savedInstanceState);mDrawerToggle.syncState();}@Overridepublic void onConfigurationChanged(Configuration newConfig) {super.onConfigurationChanged(newConfig);mDrawerToggle.onConfigurationChanged(newConfig);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {int[] optionIds;if (mDrawerLayout.isDrawerOpen(mDrawerList)) {optionIds = new int[]{R.id.option_help,R.id.option_create_trip};} else {optionIds = new int[]{R.id.option_add_participant,R.id.option_help,R.id.option_export,R.id.option_preferences};}return getApp().getMiscController().getOptionSupport().populateOptionsMenu(new OptionConstraints().activity(this).menu(menu).options(optionIds));}@Overridepublic boolean onPrepareOptionsMenu(Menu menu) {MenuItem item = menu.findItem(R.id.option_export);if (item != null) {boolean exportEnabled = getApp().getTripController().hasLoadedTripPayments();item.setEnabled(exportEnabled);item.getIcon().setAlpha((exportEnabled) ? 255 : 64);}return true;}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {// Pass the event to ActionBarDrawerToggle, if it returns// true, then it has handled the app icon touch eventif (mDrawerToggle.onOptionsItemSelected(item)) {return true;}// Handle action buttonsswitch (item.getItemId()) {case R.id.option_add_participant:getApp().getViewController().openCreateParticipant();return true;case R.id.option_export:if(getApp().getExportController().hasEnabledOutputChannel()){getApp().getViewController().openExport();} else {Toast.makeText(TrickyTripperActivity.this, R.string.no_export_option, Toast.LENGTH_LONG).show();}return true;case R.id.option_preferences:getApp().getViewController().openSettings();return true;case R.id.option_help:getApp().getViewController().openHelp(getSupportFragmentManager());return true;case R.id.option_create_trip:getApp().getViewController().openEditTrip(this, null);return true;default:return super.onOptionsItemSelected(item);}}@Overrideprotected void onSaveInstanceState(Bundle outState) {super.onSaveInstanceState(outState);outState.putInt(SELECTED_TAB_INDEX, mViewPager.getCurrentItem());}private void setTripNameToHeader() {Trip trip = getApp().getTripController().getTripLoaded();String tripText = trip.getName() + "" ""+ CurrencyUtil.getSymbolToCurrency(getResources(), trip.getBaseCurrency(), true);getSupportActionBar().setTitle(tripText);}private TrickyTripperApp getApp() {return ((TrickyTripperApp) getApplication());}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent resultData) {if (requestCode == Rc.ACTIVITY_REQ_CODE_EDIT_TRIP && resultCode == Activity.RESULT_OK) {updateList(getApp().getTripController().getAllTrips());}}void updateList(List<TripSummary> currentList) {mDrawerListAdapter.clear();for (TripSummary summary : currentList) {mDrawerListAdapter.add(new TripSummarySymbolResolvingDelegator(summary,getResources()));}mDrawerListAdapter.sort(mListComparator);}@Overridepublic void finish() {loadNextTripIfPreviousDeleted();super.finish();}private void loadNextTripIfPreviousDeleted() {TripController ctrl = getApp().getTripController();if (ctrl.getTripLoaded() == null) {ctrl.loadTrip(ctrl.getAllTrips().get(0));}}private Bundle createBundleWithTripSummaryForPopup(TripSummary selectedTripSummary) {Bundle bundle = new Bundle();bundle.putSerializable(DIALOG_PARAM_TRIP_SUMMARY, selectedTripSummary);return bundle;}private TripSummary getTripSummaryFromBundle(Bundle args) {return  (TripSummary) args.get(DIALOG_PARAM_TRIP_SUMMARY);}public String getDeleteConfirmationMsg(Bundle bundle) {TripSummary tripSummary = getTripSummaryFromBundle(bundle);return new StringBuilder().append(tripSummary.getName()).append("": "").append(getResources().getString(R.string.trip_manage_view_delete_confirmation)).toString();}public void doDelete(Bundle bundle) {TripSummary tripSummary = getTripSummaryFromBundle(bundle);getApp().getTripController().deleteTrip(tripSummary);updateList(getApp().getTripController().getAllTrips());invalidateOptionsMenu();setTripNameToHeader();updatePagerAdapter();}private class MyActionModeCallback implements ActionMode.Callback {private TripSummary selectedTrip;@Overridepublic boolean onCreateActionMode(ActionMode mode, Menu menu) {boolean canDelete = !getApp().getTripController().oneOrLessTripsLeft();int[] optionIds;if (canDelete) {optionIds = new int[]{R.id.option_delete,R.id.option_edit};} else {optionIds = new int[]{R.id.option_edit};}return getApp().getMiscController().getOptionSupport().populateOptionsMenu(new OptionConstraintsInflater().activity(mode.getMenuInflater()).menu(menu).options(optionIds));}@Overridepublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {return false;}@Overridepublic boolean onActionItemClicked(ActionMode mode, MenuItem item) {switch (item.getItemId()) {case R.id.option_delete:getApp().getViewController().openDeleteConfirmationOnActivity(getSupportFragmentManager(),createBundleWithTripSummaryForPopup(getTransferableSelection()));mode.finish(); // Closes CABreturn true;case R.id.option_edit:getApp().getViewController().openEditTrip(TrickyTripperActivity.this, getTransferableSelection());mode.finish(); // Closes CABreturn true;default:return false;}}private TripSummary getTransferableSelection() {TripSummary result = new TripSummary(selectedTrip.getName(), selectedTrip.getBaseCurrency());result.setId(selectedTrip.getId());return result;}@Overridepublic void onDestroyActionMode(ActionMode mode) {mActionMode = null;}void setSelectedTrip(TripSummary selectedTrip) {this.selectedTrip = selectedTrip;}}private class MyActionBarDrawerToggle extends ActionBarDrawerToggle {MyActionBarDrawerToggle() {super(TrickyTripperActivity.this, TrickyTripperActivity.this.mDrawerLayout, R.string.drawer_open, R.string.drawer_close);}public void onDrawerClosed(View view) {super.onDrawerClosed(view);setTripNameToHeader();supportInvalidateOptionsMenu();}public void onDrawerOpened(View drawerView) {previouslySelectedTripId = getApp().getTripController().getTripLoaded().getId();super.onDrawerOpened(drawerView);updateList(getApp().getTripController().getAllTrips());getSupportActionBar().setTitle(mDrawerTitle);supportInvalidateOptionsMenu();}}public ActionMode getRunningActionMode() {return mActionMode;}public void setRunningActionMode(ActionMode actionMode) {this.mActionMode = actionMode;mViewPager.setSwipeEnabled(actionMode== null);}}",trickytripper/app/src/main/java/de/koelle/christian/trickytripper/TrickyTripperActivity.java
8,"<?xml version=""1.0"" encoding=""utf-8""?><android.support.v4.widget.DrawerLayout xmlns:android=""http://schemas.android.com/apk/res/android""android:id=""@+id/drawer_layout""android:layout_width=""match_parent""android:layout_height=""match_parent""><de.koelle.christian.common.widget.tab.BlockableViewPagerandroid:id=""@+id/drawer_content_pager""android:layout_width=""match_parent""android:layout_height=""match_parent""><android.support.v4.view.PagerTitleStripandroid:id=""@+id/drawer_content_pager_title_strip""android:layout_width=""match_parent""android:layout_height=""wrap_content""android:layout_gravity=""top""android:background=""@color/main""android:paddingBottom=""4dp""android:paddingTop=""4dp""android:textColor=""#fff"" /></de.koelle.christian.common.widget.tab.BlockableViewPager><ListViewandroid:id=""@+id/drawer_drawer_list_view_trips""android:layout_width=""240dp""android:layout_height=""match_parent""android:layout_gravity=""start""android:choiceMode=""singleChoice""android:longClickable=""true""android:divider=""@android:color/transparent""android:dividerHeight=""0dp""android:background=""#ffffff""/></android.support.v4.widget.DrawerLayout>",trickytripper/app/src/main/res/layout/tricky_tripper_main_view.xml
8,"<html><head><style type='text/css'>a                {color:purple;font-style:italic; }div.title              {color:purple;font-weight:bold;font-size:1.2em;font-weight:bold;margin-top:1em;margin-bottom:0.5em;text-align:center }div.subtitle      {color:purple;font-weight:bold;font-size:0.8em;margin-bottom:1em;text-align:center }.appinternal          {font-style:italic; }.app                 {color:purple;font-weight:bold;}</style></head><body>$ 1.6.1% Version 1.6.1_ 2019-XX-XX* Fix: Tab-Aktualisierung erfolgt wieder nach Löschung einer Zahlung.* Fix: Fehler beim Tab-Wechsel mit geöffnetem Optionsmenü.$ 1.6.0% Version 1.6.0_ 2018-10-01* Download von Wechselkursen jetzt wieder verfügbar (jedoch ohne die Währungen Colon und Kwacha).$ 1.5.9% Version 1.5.9_ 2017-09-23* Berichtsexport: Wähle die Zielanwendung Deiner Wahl über einen Auswahldialog des Geräts, bspw. Google Drive. Bisher gab es nur eine feste Auswahl von unterstützten Zielanwendungen.* Berichtsexport: Dateien können auch direkt geöffnet werden.* Unterstützung für Android O.$ 1.5.8% Version 1.5.8_ 2016-11-23* Abstürze beim Auswählen auf den Hauptdialogen behoben.$ 1.5.7% Version 1.5.7_ 2016-11-16* Fix: Die ausgewählte Reise war nicht ohne Absturz löschbar.* Verbesserung: Zahlungsbeschreibung jetzt mit Vorschlagsliste vorhandener Beschreibungen (Dank an mbrgm).$ 1.5.6% Version 1.5.6_ 2016-10-10* Spanische Übersetzung ist jetzt verfügbar (Dank an Igor Sosa Mayor).* Boxer wird für den Berichtsexport unterstützt.$ 1.5.5% Version 1.5.5_ 2016-02-27* Französische Übersetzung ist jetzt verfügbar (Dank an Nicolas Bossard).* Italienische Übersetzung erweitert (Dank an Andrea Zanella).* Das Framework für das Herunterladen von Wechselkursen wurde ersetzt.* K9-Mail wird für den Berichtsexport unterstützt.$ 1.5.4% Version 1.5.4_ 2016-01-17* Zeitauswahl für Zahlungen war auf Android 6 Geräten nicht sichtbar.* Auf einigen Geräten stürzte die App bei Verwendung des Geldwechselrechners ab.$ 1.5.3% Version 1.5.3_ 2015-10-18* Unterstützung von Android 6 (Berechtigungen).* Hilfetexte für leere Listenansichten jetzt gemäß UI-Konventionen.$ 1.5.2% Version 1.5.2_ 2015-03-08* Bugfix: Datums- und Uhrzeitauswahl funktioniert unter Android 5 anders als bisher.$ 1.5.1% Version 1.5.1_ 2015-03-07* Reiseauswahl und -verwaltung erfolgt via Drawer, zugänglich via Burger Button.* Kontextmenüs entfernt: Funktionen jetzt im kontextsensitiven Actionbar.* Auffrischung der Dialoge, Anpassung an die Material-Designvorgaben (Android 5).* Unterstützung von Android-5-Geräten.$ 1.4.3% Version 1.4.3_ 2013-12-09* Wechselkursimport aus dem Internet funktioniert nun wieder: Die bisherige Schnittstelle von Google wurde leider abgeschaltet.$ 1.4.2% Version 1.4.2_ 2013-09-29* Anzeige, Bearbeitung, Export und Sortierung von/nach Zeitpunkt einer Zahlung.* Der Berichts-Tab wurde überarbeitet: Die Schulden von allen Reisenden werden angezeigt.* Bugfix: +-Button war hin und wieder unsichtbar.$ 1.4.1% Version 1.4.1_ 2013-08-31* Die Italienische Übersetzung ist jetzt verfügbar (Dank an Andrea Zanella).* Bugfix: Das Speichern von Berichten auf SD-Karte funktioniert wieder.* Bugfix: Die Aktualisierung von Reisenden aktualisiert nun auch den Bericht, auch ohne eine Reise neu laden zu müssen.$ 1.4.0% Version 1.4.0_ 2013-06-03* Bugfix: Der Rest einer gleichmäßigen Zahlungsaufteilung wird jetzt centweise gleichmäßig auf die Reisenden verteilt.* Statt Umweg über das Kontextmenü öffnet nun ein einfacher Tap auf einen Reisenden <span class=""appinternal"">Zahlung erstellen</span>, auf eine Zahlung <span class=""appinternal"">Zahlung bearbeiten</span>.* Actionbar-Funktionen wurden den Hauptdialogen, d.h. den Tab-Reitern, hinzugefügt.* Die Funktionalität zum Hinzufügen von Reisenden zu einer Reise wurde ergonomisch verbessert.* Einige Popup-Fenster wurden durch echte Dialoge ersetzt.* Diverse Verbesserungen der inneren Codequalität.$ 1.3.1% Version 1.3.1_ 2013-05-05* Verkleinerung der App-Größe (proguard).* Das Hinzufügen von Reisenden zu einer Reise wurde vereinfacht und überarbeitet. Mehrere Reisende können in einem Rutsch hinzugefügt werden.* Actionbar findet auf den Hauptdialogen Verwendung.$ 1.3.0% Version 1.3.0_ 2013-04-05* Wechselkursverwaltung und Währungsumrechner wurden hinzugefügt.* Allgemein: Überarbeitung des Frontends.* ActionBar steht jetzt zur Verwendung auf Sekundärdialogen bereit.$ 1.2.5% Version 1.2.5_ 2013-01-11* Popups mit Eingabefeldern werden jetzt gestaucht, um die Zugänglichkeit Buttons bei eingeblendeter Tastatur auf moderneren Telefonen zu verbessern.* Bugfix: Vorhandene Summen größer als 1000 konnten nicht editiert werden.$ 1.2.4% Version 1.2.4_ 2013-01-10* Bugfix: Nachkommastellen konnten auf einigen Telefonen nicht editiert werden (bspw. HTC Desire Bravo, Samsung Galaxy S3, Samsung Galaxy 9000). Ursache: Inkonsistente Eingabe-Keyboards.$ 1.2.3% Version 1.2.3_ 10.10.2012* <span class=""appinternal"">Änderungshistorie</span> wird nach Installation angezeigt.* <span class=""appinternal"">Was ist neu</span> wird nach Update angezeigt.* Der Dialog <span class=""appinternal"">Einstellungen</span> wurde hinzugefügt.* Die Standardwährung kannst Du jetzt einstellen (über den <span class=""appinternal"">Einstellungen</span>-Dialog).* Die <span class=""appinternal"">Interaktive Hilfe</span> kann an- und ausgeschaltet werden (über den <span class=""appinternal"">Einstellungen</span>-Dialog).* Bei Reisen ist die Währung jetzt einstellbar.$ 1.2.2% Version 1.2.2_ 22.06.2012* Fehler behoben: Export funktionierte nur mit deutscher Spracheinstellung des Telefons.$ 1.2.1% Version 1.2.1_ 19.06.2012* Exportfunktion hinzugefügt.$ END_OF_CHANGE_LOG</body></html>",trickytripper/app/src/main/res/raw-de/changelog.txt
8,"<html><head><style type='text/css'>a                {color:purple;font-style:italic; }div.title              {color:purple;font-weight:bold;font-size:1.2em;font-weight:bold;margin-top:1em;margin-bottom:0.5em;text-align:center }div.subtitle      {color:purple;font-weight:bold;font-size:0.8em;margin-bottom:1em;text-align:center }.appinternal          {font-style:italic; }.app                 {color:purple;font-weight:bold;}</style></head><body>$ 1.6.1% Version 1.6.1_ 2019-XX-XX* Fix tab refresh post payment deletion, e.g. balance and report.* Fix errors on tab-change while options menu is opened.$ 1.6.0% Version 1.6.0_ 2018-10-01* Fix online retrieval of currencies, but without support for El Salvador Colon and Sambian Kwacha.$ 1.5.9% Version 1.5.9_ 2017-09-23* Report export: The Android application chooser now lets you pick the destination application of your choice, like e.g. Google Drive. The limitation to only a few supported applications has been removed.* Report export: Choose to open the files instead of sending/saving them.* Support for Android O.$ 1.5.8% Version 1.5.8_ 2016-11-23* Fixed various crashes on selection on main screens.$ 1.5.7% Version 1.5.7_ 2016-11-16* Fix: You could not delete the currently selected trip without crashing.* Improvement: The app now auto-suggests previous payment descriptions (thx mbrgm).$ 1.5.6% Version 1.5.6_ 2016-10-10* Spanish translation added (thanks to Igor Sosa Mayor).* Boxer is now available for exporting reports.$ 1.5.5% Version 1.5.5_ 2016-02-27* French translation added (thanks to Nicolas Bossard).* Italian translation extended(thanks to Andrea Zanella).* Framework for the exchange rate download has been replaced.* K9-Mail is now available for exporting reports.$ 1.5.4% Version 1.5.4_ 2016-01-17* Time picker was not visible on screen on Android 6 devices.* Fixed technical error making the app crash when using the currency calculator on some phones.$ 1.5.3% Version 1.5.3_ 2015-10-18* Support for Android 6 (permissions).* Help texts for blank list dialogs now match UI conventions.$ 1.5.2% Version 1.5.2_ 2015-03-08* Bugfix: Date- and timepicker have different behaviour in Android 5.$ 1.5.1% Version 1.5.1_ 2015-03-07* Moved trip selection and management into newly introduced drawer, accessible via burger button.* Removed context menus: Functionality now available via contextual action bar.* Refurbished dialogs and icons to suit Android 5's material design guideline.* Supports Android 5 devices.$ 1.4.3% Version 1.4.3_ 2013-12-09* Exchange rate import from the internet now works again: The former interfaces by Google had been switched off.$ 1.4.2% Version 1.4.2_ 2013-09-29* Date and time of payment: Enable display, editing, export and sorting of/by payment time.* Refurbished report tab view: All owing debts are displayed when report scope is for all travelers.* Bugfix: Add button used to be invisible from time to time.$ 1.4.1% Version 1.4.1_ 2013-08-31* Italian translation added (thanks to Andrea Zanella).* Bugfix: Saving to SD card now works again.* Bugfix: Update of a travelers's name did not update the report, unless the trip was reloaded.$ 1.4.0% Version 1.4.0_ 2013-06-03* Bugfix: The rest of the equal split division is now equally distributed among the travelers.* No detour via context menu: A Single tap on a traveler now opens <span class=""appinternal"">Create Payment</span>, on payment it opens <span class=""appinternal"">Edit Payment</span> when suitable.* Action bar features have been enabled for the primary tabs.* The functionality to add travelers to a trip has been ergonomically improved.* Various popup dialogs have been replaced by real dialogs.* Various improvements of the internal code quality.$ 1.3.1% Version 1.3.1_ 2013-04-05* Shrink app size (proguard).* Add participant to trip has been refurbished and allows to add more than one at once.* Actionbar now in use on primary dialogs.$ 1.3.0% Version 1.3.0_ 2013-04-05* Exchange rate management and currency calculator added.* Frontend refurbished and revised.* Actionbar now in use on non-primary dialogs.$ 1.2.5% Version 1.2.5_ 2013-01-11* Popups with input fields have been shrinked to improve the accessibility of buttons on modern phones.* Bugfix: Existing sums greater than 1000 could not be edited, due to a change in the delimiter handling.$ 1.2.4% Version 1.2.4_ 2013-01-10* Bugfix: Decimal place could not be edited on some phones due to inconsistent softkeyboard implementations, e.g. HTC Desire Bravo, Samsung Galaxy S3, Samsung Galaxy 9000.$ 1.2.3% Version 1.2.3_ 2012-10-10* <span class=""appinternal"">Chang Log</span> is shown after installation.* <span class=""appinternal"">What's New</span> is shown on update.* <span class=""appinternal"">Settings</span> dialog has been added.* Define your default currency (via <span class=""appinternal"">Settings</span> dialog).* Switch smart help on/off (via <span class=""appinternal"">Settings</span> dialog).* You can select your trip's base currency.$ 1.2.2% Version 1.2.2_ 2012-06-22* Bugfix for an error occurring during export execution when language was not German.$ 1.2.1% Version 1.2.1_ 2012-06-19* Export feature added.$ END_OF_CHANGE_LOG</body></html>",trickytripper/app/src/main/res/raw/changelog.txt
